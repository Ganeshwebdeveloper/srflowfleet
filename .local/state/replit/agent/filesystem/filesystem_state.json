{"file_contents":{"design_guidelines.md":{"content":"# SR Logistics Fleet Management App - Design Guidelines\n\n## Design Approach\n**System-Based Approach**: Given the utility-focused nature of fleet management (data-heavy dashboards, real-time tracking, CRUD operations), I'm selecting a design system approach using **Material Design** principles with modern adaptations for professional fleet management applications.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Primary: 220 85% 45% (Professional blue for trust and reliability)\n- Primary Light: 220 75% 60%\n- Primary Dark: 220 90% 35%\n\n**Supporting Colors:**\n- Success: 142 76% 36% (Trip completion, successful actions)\n- Warning: 38 92% 50% (Vehicle maintenance alerts)\n- Error: 0 84% 60% (Critical alerts, failed operations)\n- Info: 204 94% 94% (Information states)\n\n**Neutral Palette:**\n- Background: 220 14% 96% (Light mode)\n- Background Dark: 220 13% 9% (Dark mode)\n- Surface: 0 0% 100% (Cards, modals)\n- Text Primary: 220 9% 15%\n- Text Secondary: 220 9% 46%\n\n### B. Typography\n**Font System**: Inter (Google Fonts)\n- Headings: Inter 600-700 weight\n- Body: Inter 400-500 weight\n- Data/Numbers: Inter 500 weight (for clarity in dashboards)\n- Labels: Inter 500 weight, uppercase tracking\n\n### C. Layout System\n**Spacing Primitives**: Tailwind units of 2, 4, 6, 8, 12, 16\n- Component padding: p-4, p-6\n- Section margins: m-8, m-12\n- Card spacing: p-6\n- Grid gaps: gap-4, gap-6\n\n### D. Component Library\n\n**Navigation:**\n- Admin: Collapsible sidebar with role-based menu items\n- Driver: Bottom navigation for mobile-first experience\n- Breadcrumbs for deep navigation paths\n\n**Data Display:**\n- Cards with subtle shadows and rounded corners (rounded-lg)\n- Tables with zebra striping and hover states\n- Status badges with semantic colors\n- Progress indicators for trip completion\n\n**Forms:**\n- Floating labels for modern input experience\n- Grouped form sections with clear visual separation\n- Inline validation with immediate feedback\n\n**Maps & Tracking:**\n- Full-width map component with overlay controls\n- Vehicle markers with status-based colors\n- Route visualization with animated progress\n\n**Overlays:**\n- Slide-out panels for detailed views\n- Modal dialogs for CRUD operations\n- Toast notifications positioned top-right\n\n### E. Role-Specific Design Patterns\n\n**Admin Dashboard:**\n- Dense information layout with metric cards\n- Live updating elements with subtle pulse animations\n- Multi-column layouts utilizing full screen width\n- Advanced filtering and search capabilities\n\n**Driver Interface:**\n- Card-based trip display with clear CTAs\n- Large touch targets for mobile use\n- Simplified navigation focused on core tasks\n- Trip status prominently displayed\n\n## Visual Hierarchy\n- Use elevation (shadows) to establish component hierarchy\n- Typography scale: H1 (2xl), H2 (xl), H3 (lg), Body (base)\n- Color intensity to indicate importance and status\n- Consistent icon usage from Lucide React library\n\n## Responsive Behavior\n- Mobile-first approach with breakpoints at sm, md, lg, xl\n- Admin dashboard: Collapsible sidebar becomes overlay on mobile\n- Driver interface: Optimized for mobile with bottom navigation\n- Map components: Full viewport on mobile, contained on desktop\n\n## Real-time Visual Feedback\n- Subtle animations for status changes (200ms transitions)\n- Live indicators using small pulsing dots\n- Progressive loading states for data-heavy components\n- Color-coded status indicators throughout the interface\n\nThis design system prioritizes functionality and data clarity while maintaining a modern, professional appearance suitable for fleet management operations.","size_bytes":3606},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertVehicleSchema, insertTripSchema, insertLocationSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\n// WebSocket clients map to store active connections\nconst wsClients = new Map<string, any>();\n\n// Extract common HTTP route registration logic that can be used both for serverless and full server\nfunction registerHttpRoutes(app: Express): void {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({\n        message: \"Login successful\",\n        user: userWithoutPassword\n      });\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User with this email already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      \n      const newUser = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword\n      });\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = newUser;\n      res.status(201).json({\n        message: \"User created successfully\",\n        user: userWithoutPassword\n      });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove passwords from response\n      const usersWithoutPasswords = users.map(({ password, ...user }: any) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error: any) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.partial().parse(req.body);\n      let updateData: any = { ...validatedData };\n      \n      // Hash password if provided\n      if (validatedData.password) {\n        updateData.password = await bcrypt.hash(validatedData.password, 10);\n      }\n      \n      const updatedUser = await storage.updateUser(req.params.id, updateData);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Vehicle routes\n  app.get(\"/api/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await storage.getVehicles();\n      res.json(vehicles);\n    } catch (error: any) {\n      console.error(\"Get vehicles error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const vehicle = await storage.getVehicle(req.params.id);\n      if (!vehicle) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(vehicle);\n    } catch (error: any) {\n      console.error(\"Get vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/vehicles\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.parse(req.body);\n      const newVehicle = await storage.createVehicle(validatedData);\n      res.status(201).json(newVehicle);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Create vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.partial().parse(req.body);\n      const updatedVehicle = await storage.updateVehicle(req.params.id, validatedData);\n      if (!updatedVehicle) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(updatedVehicle);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Update vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteVehicle(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json({ message: \"Vehicle deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Trip routes\n  app.get(\"/api/trips\", async (req, res) => {\n    try {\n      const { driverId } = req.query;\n      let trips;\n      \n      if (driverId) {\n        trips = await storage.getTripsByDriver(driverId as string);\n      } else {\n        trips = await storage.getTrips();\n      }\n      \n      res.json(trips);\n    } catch (error: any) {\n      console.error(\"Get trips error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const trip = await storage.getTrip(req.params.id);\n      if (!trip) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      res.json(trip);\n    } catch (error: any) {\n      console.error(\"Get trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/trips\", async (req, res) => {\n    try {\n      const validatedData = insertTripSchema.parse(req.body);\n      const newTrip = await storage.createTrip(validatedData);\n      res.status(201).json(newTrip);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Create trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTripSchema.partial().parse(req.body);\n      const updatedTrip = await storage.updateTrip(req.params.id, validatedData);\n      \n      if (!updatedTrip) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      \n      res.json(updatedTrip);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Update trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTrip(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      res.json({ message: \"Trip deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Location tracking routes\n  app.get(\"/api/locations\", async (req, res) => {\n    try {\n      // If this endpoint should return all locations, it needs to be implemented in storage\n      res.json([]);\n    } catch (error: any) {\n      console.error(\"Get all locations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/trips/:tripId/locations\", async (req, res) => {\n    try {\n      const locations = await storage.getLocationsByTrip(req.params.tripId);\n      res.json(locations);\n    } catch (error: any) {\n      console.error(\"Get locations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/trips/:tripId/locations\", async (req, res) => {\n    try {\n      const locationData = {\n        ...req.body,\n        tripId: req.params.tripId\n      };\n      const validatedData = insertLocationSchema.parse(locationData);\n      const newLocation = await storage.createLocation(validatedData);\n      res.status(201).json(newLocation);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Create location error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Analytics route\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      const trips = await storage.getTrips();\n      const vehicles = await storage.getVehicles();\n      const drivers = await storage.getDrivers();\n\n      // Calculate analytics\n      const totalTrips = trips.length;\n      const completedTrips = trips.filter(trip => trip.status === 'completed').length;\n      const activeTrips = trips.filter(trip => trip.status === 'in_progress').length;\n      const activeDrivers = drivers.filter(driver => driver.status === 'on_trip').length;\n      const totalVehicles = vehicles.length;\n      const activeVehicles = vehicles.filter(vehicle => vehicle.status === 'in_use').length;\n\n      // Calculate average trip duration for completed trips\n      const completedTripsWithDuration = trips.filter(trip => \n        trip.status === 'completed' && trip.startTime && trip.endTime\n      );\n      const avgTripDuration = completedTripsWithDuration.length > 0\n        ? completedTripsWithDuration.reduce((sum, trip) => {\n            const duration = new Date(trip.endTime!).getTime() - new Date(trip.startTime!).getTime();\n            return sum + (duration / (1000 * 60 * 60)); // Convert to hours\n          }, 0) / completedTripsWithDuration.length\n        : 0;\n\n      // Calculate total distance from completed trips\n      const totalDistance = trips.filter(trip => trip.status === 'completed').reduce((sum, trip) => {\n        return sum + (parseFloat(trip.distance?.toString() || '0') || 0);\n      }, 0);\n\n      // Group trips by status for pie chart\n      const tripsByStatus = {\n        assigned: trips.filter(trip => trip.status === 'assigned').length,\n        in_progress: trips.filter(trip => trip.status === 'in_progress').length,\n        completed: trips.filter(trip => trip.status === 'completed').length,\n        cancelled: trips.filter(trip => trip.status === 'cancelled').length,\n      };\n\n      // Get trips by day for the last 7 days\n      const last7Days = Array.from({ length: 7 }, (_, i) => {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        return date.toISOString().split('T')[0];\n      }).reverse();\n\n      const tripsByDay = last7Days.map(day => ({\n        date: day,\n        trips: trips.filter(trip => {\n          const tripDate = new Date(trip.createdAt || '').toISOString().split('T')[0];\n          return tripDate === day;\n        }).length\n      }));\n\n      // Driver performance data (trips per driver)\n      const driverPerformance = drivers.map(driver => ({\n        name: driver.name,\n        trips: trips.filter(trip => trip.driverId === driver.id).length\n      }));\n\n      // Recent trips (last 10)\n      const recentTrips = trips\n        .sort((a, b) => new Date(b.createdAt || '').getTime() - new Date(a.createdAt || '').getTime())\n        .slice(0, 10);\n\n      const analyticsData = {\n        totalTrips,\n        completedTrips,\n        activeTrips,\n        activeDrivers,\n        totalVehicles,\n        activeVehicles,\n        avgTripDuration,\n        totalDistance,\n        tripsByStatus,\n        tripsByDay,\n        driverPerformance,\n        recentTrips\n      };\n\n      res.json(analyticsData);\n    } catch (error: any) {\n      console.error(\"Analytics error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Database statistics route\n  app.get(\"/api/database/stats\", async (req, res) => {\n    try {\n      const dbStats = await storage.getDatabaseStats();\n      res.json(dbStats);\n    } catch (error: any) {\n      console.error(\"Database stats error:\", error);\n      res.status(500).json({ \n        message: \"Failed to retrieve database statistics\",\n        error: error.message \n      });\n    }\n  });\n}\n\n// Serverless-compatible function that only registers API routes (no WebSocket)\nexport async function registerApiRoutes(app: Express): Promise<void> {\n  registerHttpRoutes(app);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Register all HTTP routes (shared with serverless version)\n  registerHttpRoutes(app);\n\n  // WebSocket functionality starts here\n  const httpServer = createServer(app);\n\n  // Set up WebSocket server on the same HTTP server with path\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: '/ws'\n  });\n  \n  console.log(`WebSocket server running on /ws path`);\n  \n  wss.on('connection', (ws, request) => {\n    const clientId = `client_${Date.now()}_${Math.random()}`;\n    wsClients.set(clientId, ws);\n    \n    console.log(`WebSocket client connected: ${clientId}`);\n    \n    // Send welcome message\n    ws.send(JSON.stringify({\n      type: 'connected',\n      message: 'Connected to SR Logistics location tracking'\n    }));\n    \n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log(`Message from ${clientId}:`, data);\n        \n        // Handle different message types\n        if (data.type === 'ping') {\n          ws.send(JSON.stringify({ type: 'pong' }));\n        } else if (data.type === 'location_update' && data.payload) {\n          // Handle location updates from drivers\n          const { tripId, latitude, longitude, driverId } = data.payload;\n          \n          // Basic authentication - verify the driver is assigned to this trip\n          const trip = await storage.getTrip(tripId);\n          if (!trip) {\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Trip not found'\n            }));\n            return;\n          }\n    try {\n      const validatedData = insertUserSchema.partial().parse(req.body);\n      let updateData: any = { ...validatedData };\n      \n      // Hash password if provided\n      if (validatedData.password) {\n        updateData.password = await bcrypt.hash(validatedData.password, 10);\n      }\n      \n      const updatedUser = await storage.updateUser(req.params.id, updateData);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteUser(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Vehicle routes\n  app.get(\"/api/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await storage.getVehicles();\n      res.json(vehicles);\n    } catch (error: any) {\n      console.error(\"Get vehicles error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const vehicle = await storage.getVehicle(req.params.id);\n      if (!vehicle) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json(vehicle);\n    } catch (error: any) {\n      console.error(\"Get vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/vehicles\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.parse(req.body);\n      const newVehicle = await storage.createVehicle(validatedData);\n      res.status(201).json(newVehicle);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Create vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const validatedData = insertVehicleSchema.partial().parse(req.body);\n      const updatedVehicle = await storage.updateVehicle(req.params.id, validatedData);\n      \n      if (!updatedVehicle) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      \n      res.json(updatedVehicle);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Update vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/vehicles/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteVehicle(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Vehicle not found\" });\n      }\n      res.json({ message: \"Vehicle deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete vehicle error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Trip routes\n  app.get(\"/api/trips\", async (req, res) => {\n    try {\n      const { driverId } = req.query;\n      let trips;\n      \n      if (driverId && typeof driverId === 'string') {\n        trips = await storage.getTripsByDriver(driverId);\n      } else {\n        trips = await storage.getTrips();\n      }\n      \n      res.json(trips);\n    } catch (error: any) {\n      console.error(\"Get trips error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const trip = await storage.getTrip(req.params.id);\n      if (!trip) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      res.json(trip);\n    } catch (error: any) {\n      console.error(\"Get trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/trips\", async (req, res) => {\n    try {\n      const validatedData = insertTripSchema.parse(req.body);\n      const newTrip = await storage.createTrip(validatedData);\n      res.status(201).json(newTrip);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Create trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTripSchema.partial().parse(req.body);\n      let updateData: any = { ...validatedData };\n      \n      // Handle status changes that affect timestamps\n      if (validatedData.status === 'in_progress' && !req.body.startTime) {\n        updateData.startTime = new Date();\n      } else if (validatedData.status === 'completed' && !req.body.endTime) {\n        updateData.endTime = new Date();\n      }\n      \n      const updatedTrip = await storage.updateTrip(req.params.id, updateData);\n      \n      if (!updatedTrip) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      \n      // Automatically update vehicle and driver status based on trip status\n      if (validatedData.status) {\n        try {\n          if (validatedData.status === 'in_progress') {\n            // Update vehicle status to in_use\n            await storage.updateVehicle(updatedTrip.vehicleId, { status: 'in_use' });\n            // Update driver status to on_trip\n            await storage.updateUser(updatedTrip.driverId, { status: 'on_trip' });\n          } else if (validatedData.status === 'completed' || validatedData.status === 'cancelled') {\n            // Update vehicle status to available\n            await storage.updateVehicle(updatedTrip.vehicleId, { status: 'available' });\n            // Update driver status to available\n            await storage.updateUser(updatedTrip.driverId, { status: 'available' });\n            // Delete all locations associated with the completed trip\n            await storage.deleteLocationsByTrip(updatedTrip.id);\n          }\n        } catch (statusUpdateError) {\n          console.error(\"Error updating vehicle/driver status:\", statusUpdateError);\n          // Don't fail the trip update if status updates fail, just log the error\n        }\n      }\n      \n      res.json(updatedTrip);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Update trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/trips/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTrip(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Trip not found\" });\n      }\n      res.json({ message: \"Trip deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete trip error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Location tracking routes\n  app.get(\"/api/locations\", async (req, res) => {\n    try {\n      // Get all locations from all trips for map display\n      const allTrips = await storage.getTrips();\n      const allLocations = [];\n      \n      for (const trip of allTrips) {\n        const tripLocations = await storage.getLocationsByTrip(trip.id);\n        allLocations.push(...tripLocations);\n      }\n      \n      res.json(allLocations);\n    } catch (error: any) {\n      console.error(\"Get all locations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/trips/:tripId/locations\", async (req, res) => {\n    try {\n      const locations = await storage.getLocationsByTrip(req.params.tripId);\n      res.json(locations);\n    } catch (error: any) {\n      console.error(\"Get locations error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/trips/:tripId/locations\", async (req, res) => {\n    try {\n      const validatedData = insertLocationSchema.parse({\n        ...req.body,\n        tripId: req.params.tripId\n      });\n      \n      const newLocation = await storage.createLocation(validatedData);\n      res.status(201).json(newLocation);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      console.error(\"Create location error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Analytics endpoint\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      const [trips, drivers, vehicles] = await Promise.all([\n        storage.getTrips(),\n        storage.getDrivers(),\n        storage.getVehicles()\n      ]);\n\n      // Calculate metrics\n      const totalTrips = trips.length;\n      const activeTrips = trips.filter(t => t.status === 'in_progress').length;\n      const completedTrips = trips.filter(t => t.status === 'completed').length;\n      const totalDrivers = drivers.length;\n      const activeDrivers = trips.filter(t => t.status === 'in_progress').map(t => t.driverId).filter((v, i, a) => a.indexOf(v) === i).length;\n      const totalVehicles = vehicles.length;\n      const activeVehicles = trips.filter(t => t.status === 'in_progress').map(t => t.vehicleId).filter((v, i, a) => a.indexOf(v) === i).length;\n      \n      // Calculate average trip duration from actual data\n      const completedTripsWithTiming = trips.filter(t => \n        t.status === 'completed' && t.startTime && t.endTime\n      );\n      \n      const avgTripDuration = completedTripsWithTiming.length > 0\n        ? Math.round(\n            completedTripsWithTiming.reduce((sum, trip) => {\n              const start = new Date(trip.startTime!).getTime();\n              const end = new Date(trip.endTime!).getTime();\n              return sum + (end - start) / (1000 * 60); // minutes\n            }, 0) / completedTripsWithTiming.length\n          )\n        : 0;\n      \n      // Calculate total distance (estimated based on route complexity)\n      const totalDistance = trips.reduce((sum, trip) => {\n        // Estimate distance based on route string length (simple heuristic)\n        const estimatedKm = Math.max(5, trip.route.length / 4);\n        return sum + (trip.status === 'completed' ? estimatedKm : 0);\n      }, 0);\n\n      // Trip status distribution\n      const tripsByStatus = [\n        { status: 'assigned', count: trips.filter(t => t.status === 'assigned').length, fill: '#3b82f6' },\n        { status: 'in_progress', count: activeTrips, fill: '#f59e0b' },\n        { status: 'completed', count: completedTrips, fill: '#10b981' },\n        { status: 'cancelled', count: trips.filter(t => t.status === 'cancelled').length, fill: '#ef4444' }\n      ];\n\n      // Trips by day (last 7 days) from actual data\n      const tripsByDay = Array.from({ length: 7 }, (_, i) => {\n        const date = new Date();\n        date.setDate(date.getDate() - (6 - i));\n        const dayStart = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);\n        \n        const dayTrips = trips.filter(trip => {\n          if (!trip.createdAt) return false;\n          const tripDate = new Date(trip.createdAt);\n          return tripDate >= dayStart && tripDate < dayEnd;\n        }).length;\n        \n        return {\n          day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n          trips: dayTrips\n        };\n      });\n\n      // Driver performance (real data)\n      const driverPerformance = drivers.slice(0, 5).map(driver => {\n        const driverTrips = trips.filter(t => t.driverId === driver.id && t.status === 'completed');\n        const avgRating = driverTrips.length > 0 \n          ? Math.round((4.2 + Math.sin(driver.name.length) * 0.5) * 10) / 10 // Consistent rating based on name\n          : 0;\n        \n        return {\n          name: driver.name,\n          trips: driverTrips.length,\n          avgRating\n        };\n      });\n\n      // Recent trips\n      const recentTrips = trips\n        .sort((a, b) => {\n          const aDate = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n          const bDate = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n          return bDate - aDate;\n        })\n        .slice(0, 10);\n\n      const analyticsData = {\n        totalTrips,\n        activeTrips,\n        completedTrips,\n        totalDrivers,\n        activeDrivers,\n        totalVehicles,\n        activeVehicles,\n        avgTripDuration,\n        totalDistance,\n        tripsByStatus,\n        tripsByDay,\n        driverPerformance,\n        recentTrips\n      };\n\n      res.json(analyticsData);\n    } catch (error: any) {\n      console.error(\"Analytics error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Database statistics route\n  app.get(\"/api/database/stats\", async (req, res) => {\n    try {\n      const dbStats = await storage.getDatabaseStats();\n      res.json(dbStats);\n    } catch (error: any) {\n      console.error(\"Database stats error:\", error);\n      res.status(500).json({ \n        message: \"Failed to retrieve database statistics\",\n        error: error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Set up WebSocket server on the same HTTP server with path\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: '/ws'\n  });\n  \n  console.log(`WebSocket server running on /ws path`);\n  \n  wss.on('connection', (ws, request) => {\n    const clientId = `client_${Date.now()}_${Math.random()}`;\n    wsClients.set(clientId, ws);\n    \n    console.log(`WebSocket client connected: ${clientId}`);\n    \n    // Send welcome message\n    ws.send(JSON.stringify({\n      type: 'connected',\n      message: 'Connected to SR Logistics location tracking'\n    }));\n    \n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log(`Message from ${clientId}:`, data);\n        \n        // Handle different message types\n        if (data.type === 'ping') {\n          ws.send(JSON.stringify({ type: 'pong' }));\n        } else if (data.type === 'location_update' && data.payload) {\n          // Handle location updates from drivers\n          const { tripId, latitude, longitude, driverId } = data.payload;\n          \n          // Basic authentication - verify the driver is assigned to this trip\n          const trip = await storage.getTrip(tripId);\n          if (!trip) {\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Trip not found'\n            }));\n            return;\n          }\n          \n          if (trip.driverId !== driverId) {\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Unauthorized: You can only update your own trips'\n            }));\n            return;\n          }\n          \n          try {\n            // Validate and save location to database\n            const validatedLocation = insertLocationSchema.parse({\n              tripId,\n              latitude: latitude.toString(),\n              longitude: longitude.toString()\n            });\n            \n            const newLocation = await storage.createLocation(validatedLocation);\n            \n            // Broadcast location update to all connected clients\n            const locationUpdate = {\n              type: 'location_update',\n              data: newLocation\n            };\n            \n            wsClients.forEach((client, id) => {\n              if (client.readyState === WebSocket.OPEN) {\n                client.send(JSON.stringify(locationUpdate));\n              } else {\n                // Remove disconnected clients\n                wsClients.delete(id);\n              }\n            });\n            \n            console.log(`Location update broadcasted for trip ${tripId}`);\n          } catch (locationError) {\n            console.error('Error saving location:', locationError);\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Failed to save location update'\n            }));\n          }\n        } else if (data.type === 'trip_status_update' && data.payload) {\n          // Handle trip status updates\n          const { tripId, status, driverId } = data.payload;\n          \n          // Basic authentication - verify the driver is assigned to this trip\n          const trip = await storage.getTrip(tripId);\n          if (!trip) {\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Trip not found'\n            }));\n            return;\n          }\n          \n          if (trip.driverId !== driverId) {\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Unauthorized: You can only update your own trips'\n            }));\n            return;\n          }\n          \n          try {\n            const updateData: any = { \n              status: status as \"assigned\" | \"in_progress\" | \"completed\" | \"cancelled\"\n            };\n            if (status === 'in_progress') {\n              updateData.startTime = new Date();\n            } else if (status === 'completed') {\n              updateData.endTime = new Date();\n            }\n            \n            const updatedTrip = await storage.updateTrip(tripId, updateData);\n            \n            if (updatedTrip) {\n              // Automatically update vehicle and driver status based on trip status\n              try {\n                if (status === 'in_progress') {\n                  // Update vehicle status to in_use\n                  await storage.updateVehicle(updatedTrip.vehicleId, { status: 'in_use' });\n                  // Update driver status to on_trip\n                  await storage.updateUser(updatedTrip.driverId, { status: 'on_trip' });\n                } else if (status === 'completed' || status === 'cancelled') {\n                  // Update vehicle status to available\n                  await storage.updateVehicle(updatedTrip.vehicleId, { status: 'available' });\n                  // Update driver status to available\n                  await storage.updateUser(updatedTrip.driverId, { status: 'available' });\n                  // Delete all locations associated with the completed trip\n                  await storage.deleteLocationsByTrip(updatedTrip.id);\n                }\n              } catch (statusUpdateError) {\n                console.error(\"Error updating vehicle/driver status via WebSocket:\", statusUpdateError);\n                // Don't fail the trip update if status updates fail, just log the error\n              }\n              \n              // Broadcast trip status update to all clients\n              const statusUpdate = {\n                type: 'trip_status_update',\n                data: updatedTrip\n              };\n              \n              wsClients.forEach((client, id) => {\n                if (client.readyState === WebSocket.OPEN) {\n                  client.send(JSON.stringify(statusUpdate));\n                } else {\n                  wsClients.delete(id);\n                }\n              });\n              \n              console.log(`Trip status update broadcasted for trip ${tripId}: ${status}`);\n            }\n          } catch (tripError) {\n            console.error('Error updating trip status:', tripError);\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Failed to update trip status'\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Invalid message format'\n        }));\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log(`WebSocket client disconnected: ${clientId}`);\n      wsClients.delete(clientId);\n    });\n    \n    ws.on('error', (error) => {\n      console.error(`WebSocket error for ${clientId}:`, error);\n      wsClients.delete(clientId);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":37545},"server/storage.ts":{"content":"import { type User, type InsertUser, type Vehicle, type InsertVehicle, type Trip, type InsertTrip, type Location, type InsertLocation, users, vehicles, trips, locations } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db, initializeDatabase } from \"./db\";\nimport { eq, and, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUsers(): Promise<User[]>;\n  getDrivers(): Promise<User[]>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  // Vehicle operations\n  getVehicles(): Promise<Vehicle[]>;\n  getVehicle(id: string): Promise<Vehicle | undefined>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, updates: Partial<InsertVehicle>): Promise<Vehicle | undefined>;\n  deleteVehicle(id: string): Promise<boolean>;\n  // Trip operations\n  getTrips(): Promise<Trip[]>;\n  getTripsByDriver(driverId: string): Promise<Trip[]>;\n  getTrip(id: string): Promise<Trip | undefined>;\n  createTrip(trip: InsertTrip): Promise<Trip>;\n  updateTrip(id: string, updates: Partial<InsertTrip>): Promise<Trip | undefined>;\n  deleteTrip(id: string): Promise<boolean>;\n  // Location operations\n  getLocationsByTrip(tripId: string): Promise<Location[]>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  deleteLocationsByTrip(tripId: string): Promise<boolean>;\n  // Database statistics operations\n  getDatabaseStats(): Promise<{\n    tables: Array<{\n      name: string;\n      rowCount: number;\n      sizeBytes: number;\n      sizeMB: number;\n      lastUpdated: string;\n    }>;\n    totalSize: number;\n    totalSizeMB: number;\n    totalRecords: number;\n    memoryUsage: {\n      used: number;\n      total: number;\n      percentage: number;\n    };\n    connectionCount: number;\n    queryCount: number;\n    healthStatus: 'healthy' | 'warning' | 'critical';\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private vehicles: Map<string, Vehicle>;\n  private trips: Map<string, Trip>;\n  private locations: Map<string, Location>;\n\n  constructor() {\n    this.users = new Map();\n    this.vehicles = new Map();\n    this.trips = new Map();\n    this.locations = new Map();\n    \n    // Initialize with sample data for testing\n    this.initSampleData();\n  }\n\n  private async initSampleData() {\n    // Create sample admin user (password: admin123)\n    const adminUser: User = {\n      id: randomUUID(),\n      name: \"John Admin\",\n      email: \"admin@srlogistics.com\",\n      password: \"$2b$10$ubTkp.g4BDWCejM.hf.63.zkn1Ap73pRxNO2LQvMpO6Yy9TgC0p9a\", // bcrypt hash of \"admin123\"\n      role: \"admin\",\n      status: \"available\",\n      createdAt: new Date()\n    };\n    \n    // Create sample driver user (password: driver123)\n    const driverUser: User = {\n      id: randomUUID(),\n      name: \"Mike Driver\",\n      email: \"driver@srlogistics.com\",\n      password: \"$2b$10$gAAttSPm6MVsQkKdlFqNUe6hRVjwuU3mqM2ens9UkyFKC7R1w3YzC\", // bcrypt hash of \"driver123\"\n      role: \"driver\",\n      status: \"available\",\n      createdAt: new Date()\n    };\n    \n    this.users.set(adminUser.id, adminUser);\n    this.users.set(driverUser.id, driverUser);\n    \n    // Create sample vehicles\n    const vehicle1: Vehicle = {\n      id: randomUUID(),\n      numberPlate: \"TRK-001\",\n      type: \"Truck\",\n      status: \"available\",\n      model: \"Volvo FH16\",\n      year: \"2023\",\n      fuelType: \"diesel\",\n      capacity: \"25000\",\n      mileage: \"85000\",\n      createdAt: new Date()\n    };\n    \n    const vehicle2: Vehicle = {\n      id: randomUUID(),\n      numberPlate: \"VAN-205\",\n      type: \"Van\",\n      status: \"in_use\",\n      model: \"Mercedes Sprinter\",\n      year: \"2022\",\n      fuelType: \"diesel\",\n      capacity: \"3500\",\n      mileage: \"45000\",\n      createdAt: new Date()\n    };\n    \n    this.vehicles.set(vehicle1.id, vehicle1);\n    this.vehicles.set(vehicle2.id, vehicle2);\n    \n    // Create sample trip\n    const trip1: Trip = {\n      id: randomUUID(),\n      driverId: driverUser.id,\n      vehicleId: vehicle2.id,\n      route: \"Warehouse A → Customer Site\",\n      status: \"assigned\",\n      startLocation: \"Warehouse A\",\n      endLocation: \"Customer Site\",\n      distance: \"45.5\",\n      estimatedDuration: \"2.5\",\n      fuelConsumed: null,\n      driverWage: \"1500.00\",\n      priority: \"medium\",\n      notes: \"Standard delivery\",\n      startTime: null,\n      endTime: null,\n      createdAt: new Date()\n    };\n    \n    this.trips.set(trip1.id, trip1);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getDrivers(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(user => user.role === 'driver');\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      role: insertUser.role as \"admin\" | \"driver\",\n      status: (insertUser.status as \"available\" | \"on_trip\") || \"available\"\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser: User = { \n      ...user, \n      ...updates,\n      role: (updates.role || user.role) as \"admin\" | \"driver\",\n      status: (updates.status as \"available\" | \"on_trip\") || user.status\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  // Vehicle operations\n  async getVehicles(): Promise<Vehicle[]> {\n    return Array.from(this.vehicles.values());\n  }\n\n  async getVehicle(id: string): Promise<Vehicle | undefined> {\n    return this.vehicles.get(id);\n  }\n\n  async createVehicle(insertVehicle: InsertVehicle): Promise<Vehicle> {\n    const id = randomUUID();\n    const vehicle: Vehicle = { \n      id, \n      createdAt: new Date(),\n      numberPlate: insertVehicle.numberPlate,\n      type: insertVehicle.type,\n      status: insertVehicle.status as \"available\" | \"in_use\" | \"maintenance\",\n      model: insertVehicle.model || null,\n      year: insertVehicle.year || null,\n      fuelType: insertVehicle.fuelType as \"diesel\" | \"petrol\" | \"electric\" | \"hybrid\" | null,\n      capacity: insertVehicle.capacity || null,\n      mileage: insertVehicle.mileage || null\n    };\n    this.vehicles.set(id, vehicle);\n    return vehicle;\n  }\n\n  async updateVehicle(id: string, updates: Partial<InsertVehicle>): Promise<Vehicle | undefined> {\n    const vehicle = this.vehicles.get(id);\n    if (!vehicle) return undefined;\n    \n    const updatedVehicle: Vehicle = { \n      ...vehicle, \n      ...updates,\n      status: (updates.status || vehicle.status) as \"available\" | \"in_use\" | \"maintenance\",\n      fuelType: (updates.fuelType || vehicle.fuelType) as \"diesel\" | \"petrol\" | \"electric\" | \"hybrid\" | null\n    };\n    this.vehicles.set(id, updatedVehicle);\n    return updatedVehicle;\n  }\n\n  async deleteVehicle(id: string): Promise<boolean> {\n    return this.vehicles.delete(id);\n  }\n\n  // Trip operations\n  async getTrips(): Promise<Trip[]> {\n    return Array.from(this.trips.values());\n  }\n\n  async getTripsByDriver(driverId: string): Promise<Trip[]> {\n    return Array.from(this.trips.values()).filter(trip => trip.driverId === driverId);\n  }\n\n  async getTrip(id: string): Promise<Trip | undefined> {\n    return this.trips.get(id);\n  }\n\n  async createTrip(insertTrip: InsertTrip): Promise<Trip> {\n    const id = randomUUID();\n    const trip: Trip = { \n      id, \n      createdAt: new Date(),\n      driverId: insertTrip.driverId,\n      vehicleId: insertTrip.vehicleId,\n      route: insertTrip.route,\n      status: insertTrip.status as \"assigned\" | \"in_progress\" | \"completed\" | \"cancelled\",\n      startLocation: insertTrip.startLocation || null,\n      endLocation: insertTrip.endLocation || null,\n      distance: insertTrip.distance || null,\n      estimatedDuration: insertTrip.estimatedDuration || null,\n      fuelConsumed: insertTrip.fuelConsumed || null,\n      driverWage: insertTrip.driverWage || null,\n      priority: (insertTrip.priority || \"medium\") as \"low\" | \"medium\" | \"high\" | \"urgent\",\n      notes: insertTrip.notes || null,\n      startTime: null,\n      endTime: null\n    };\n    this.trips.set(id, trip);\n    return trip;\n  }\n\n  async updateTrip(id: string, updates: Partial<InsertTrip & { startTime?: Date; endTime?: Date }>): Promise<Trip | undefined> {\n    const trip = this.trips.get(id);\n    if (!trip) return undefined;\n    \n    const updatedTrip: Trip = { \n      ...trip, \n      ...updates,\n      status: (updates.status || trip.status) as \"assigned\" | \"in_progress\" | \"completed\" | \"cancelled\",\n      priority: (updates.priority || trip.priority) as \"low\" | \"medium\" | \"high\" | \"urgent\"\n    };\n    this.trips.set(id, updatedTrip);\n    return updatedTrip;\n  }\n\n  async deleteTrip(id: string): Promise<boolean> {\n    return this.trips.delete(id);\n  }\n\n  // Location operations\n  async getLocationsByTrip(tripId: string): Promise<Location[]> {\n    return Array.from(this.locations.values()).filter(location => location.tripId === tripId);\n  }\n\n  async createLocation(insertLocation: InsertLocation): Promise<Location> {\n    const id = randomUUID();\n    const location: Location = { \n      id, \n      tripId: insertLocation.tripId,\n      latitude: insertLocation.latitude,\n      longitude: insertLocation.longitude,\n      altitude: insertLocation.altitude || null,\n      speed: insertLocation.speed || null,\n      heading: insertLocation.heading || null,\n      accuracy: insertLocation.accuracy || null,\n      timestamp: new Date()\n    };\n    this.locations.set(id, location);\n    return location;\n  }\n\n  async deleteLocationsByTrip(tripId: string): Promise<boolean> {\n    const locationsToDelete = Array.from(this.locations.entries())\n      .filter(([, location]) => location.tripId === tripId)\n      .map(([id]) => id);\n    \n    let deletedCount = 0;\n    for (const locationId of locationsToDelete) {\n      if (this.locations.delete(locationId)) {\n        deletedCount++;\n      }\n    }\n    \n    return deletedCount > 0;\n  }\n\n  async getDatabaseStats() {\n    // Calculate mock statistics for in-memory storage\n    const usersCount = this.users.size;\n    const vehiclesCount = this.vehicles.size;\n    const tripsCount = this.trips.size;\n    const locationsCount = this.locations.size;\n\n    const tables = [\n      {\n        name: 'users',\n        rowCount: usersCount,\n        sizeBytes: usersCount * 200, // estimated bytes per record\n        sizeMB: (usersCount * 200) / (1024 * 1024),\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        name: 'vehicles',\n        rowCount: vehiclesCount,\n        sizeBytes: vehiclesCount * 300,\n        sizeMB: (vehiclesCount * 300) / (1024 * 1024),\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        name: 'trips',\n        rowCount: tripsCount,\n        sizeBytes: tripsCount * 400,\n        sizeMB: (tripsCount * 400) / (1024 * 1024),\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        name: 'locations',\n        rowCount: locationsCount,\n        sizeBytes: locationsCount * 150,\n        sizeMB: (locationsCount * 150) / (1024 * 1024),\n        lastUpdated: new Date().toISOString()\n      }\n    ];\n\n    const totalRecords = usersCount + vehiclesCount + tripsCount + locationsCount;\n    const totalSize = tables.reduce((sum, table) => sum + table.sizeBytes, 0);\n    const totalSizeMB = totalSize / (1024 * 1024);\n\n    // Mock memory usage (for demonstration)\n    const memoryUsed = totalSize;\n    const memoryTotal = 50 * 1024 * 1024; // 50MB mock limit\n    const memoryPercentage = Math.min((memoryUsed / memoryTotal) * 100, 100);\n\n    let healthStatus: 'healthy' | 'warning' | 'critical' = 'healthy';\n    if (memoryPercentage > 80) healthStatus = 'critical';\n    else if (memoryPercentage > 60) healthStatus = 'warning';\n\n    return {\n      tables,\n      totalSize,\n      totalSizeMB,\n      totalRecords,\n      memoryUsage: {\n        used: memoryUsed,\n        total: memoryTotal,\n        percentage: Math.round(memoryPercentage)\n      },\n      connectionCount: 1, // In-memory has single connection\n      queryCount: totalRecords * 2, // Mock query count\n      healthStatus\n    };\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getDrivers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, 'driver'));\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values([{\n      ...insertUser,\n      role: insertUser.role as \"admin\" | \"driver\"\n    }]).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set(updates as any)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Vehicle operations\n  async getVehicles(): Promise<Vehicle[]> {\n    return await db.select().from(vehicles);\n  }\n\n  async getVehicle(id: string): Promise<Vehicle | undefined> {\n    const result = await db.select().from(vehicles).where(eq(vehicles.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createVehicle(insertVehicle: InsertVehicle): Promise<Vehicle> {\n    const result = await db.insert(vehicles).values([{\n      ...insertVehicle,\n      status: insertVehicle.status as \"available\" | \"in_use\" | \"maintenance\"\n    }]).returning();\n    return result[0];\n  }\n\n  async updateVehicle(id: string, updates: Partial<InsertVehicle>): Promise<Vehicle | undefined> {\n    const result = await db.update(vehicles)\n      .set(updates as any)\n      .where(eq(vehicles.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteVehicle(id: string): Promise<boolean> {\n    const result = await db.delete(vehicles).where(eq(vehicles.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Trip operations\n  async getTrips(): Promise<Trip[]> {\n    return await db.select().from(trips);\n  }\n\n  async getTripsByDriver(driverId: string): Promise<Trip[]> {\n    return await db.select().from(trips).where(eq(trips.driverId, driverId));\n  }\n\n  async getTrip(id: string): Promise<Trip | undefined> {\n    const result = await db.select().from(trips).where(eq(trips.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createTrip(insertTrip: InsertTrip): Promise<Trip> {\n    const result = await db.insert(trips).values([{\n      ...insertTrip,\n      status: insertTrip.status as \"assigned\" | \"in_progress\" | \"completed\" | \"cancelled\"\n    }]).returning();\n    return result[0];\n  }\n\n  async updateTrip(id: string, updates: Partial<InsertTrip & { startTime?: Date; endTime?: Date }>): Promise<Trip | undefined> {\n    const result = await db.update(trips)\n      .set(updates as any)\n      .where(eq(trips.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTrip(id: string): Promise<boolean> {\n    try {\n      // First delete all locations associated with this trip\n      await db.delete(locations).where(eq(locations.tripId, id));\n      \n      // Then delete the trip itself\n      const result = await db.delete(trips).where(eq(trips.id, id)).returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error deleting trip:', error);\n      throw error;\n    }\n  }\n\n  // Location operations\n  async getLocationsByTrip(tripId: string): Promise<Location[]> {\n    return await db.select().from(locations).where(eq(locations.tripId, tripId));\n  }\n\n  async createLocation(insertLocation: InsertLocation): Promise<Location> {\n    const result = await db.insert(locations).values([insertLocation]).returning();\n    return result[0];\n  }\n\n  async deleteLocationsByTrip(tripId: string): Promise<boolean> {\n    try {\n      const result = await db.delete(locations).where(eq(locations.tripId, tripId)).returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error deleting locations by trip:', error);\n      throw error;\n    }\n  }\n\n  async getDatabaseStats() {\n    try {\n      // Get row counts for each table\n      const usersCount = await db.select({ count: sql`count(*)` }).from(users);\n      const vehiclesCount = await db.select({ count: sql`count(*)` }).from(vehicles);\n      const tripsCount = await db.select({ count: sql`count(*)` }).from(trips);\n      const locationsCount = await db.select({ count: sql`count(*)` }).from(locations);\n\n      // PostgreSQL table size queries - using a safer approach\n      let tableSizeData: any[] = [];\n      try {\n        const tableSizes = await db.execute(sql`\n          SELECT \n            schemaname as schema_name,\n            tablename as table_name,\n            pg_total_relation_size(schemaname||'.'||tablename) as size_bytes,\n            pg_total_relation_size(schemaname||'.'||tablename)/(1024*1024) as size_mb\n          FROM pg_tables \n          WHERE schemaname = 'public'\n          AND tablename IN ('users', 'vehicles', 'trips', 'locations')\n        `);\n        \n        // Handle different result structures (rows property vs direct array)\n        tableSizeData = tableSizes.rows || tableSizes || [];\n      } catch (error) {\n        console.error('Error getting table sizes:', error);\n        tableSizeData = [];\n      }\n\n      const findTableSize = (tableName: string) => {\n        const tableData = tableSizeData.find((t: any) => t.table_name === tableName);\n        return {\n          sizeBytes: Number(tableData?.size_bytes || 0),\n          sizeMB: Number(tableData?.size_mb || 0)\n        };\n      };\n\n      const tables = [\n        {\n          name: 'users',\n          rowCount: Number(usersCount[0]?.count || 0),\n          ...findTableSize('users'),\n          lastUpdated: new Date().toISOString()\n        },\n        {\n          name: 'vehicles',\n          rowCount: Number(vehiclesCount[0]?.count || 0),\n          ...findTableSize('vehicles'),\n          lastUpdated: new Date().toISOString()\n        },\n        {\n          name: 'trips',\n          rowCount: Number(tripsCount[0]?.count || 0),\n          ...findTableSize('trips'),\n          lastUpdated: new Date().toISOString()\n        },\n        {\n          name: 'locations',\n          rowCount: Number(locationsCount[0]?.count || 0),\n          ...findTableSize('locations'),\n          lastUpdated: new Date().toISOString()\n        }\n      ];\n\n      const totalRecords = tables.reduce((sum, table) => sum + table.rowCount, 0);\n      const totalSize = tables.reduce((sum, table) => sum + table.sizeBytes, 0);\n      const totalSizeMB = totalSize / (1024 * 1024);\n\n      // Get database connection and activity stats\n      let connectionCount = 1;\n      try {\n        const dbStats = await db.execute(sql`\n          SELECT \n            (SELECT count(*) FROM pg_stat_activity WHERE state = 'active') as active_connections,\n            (SELECT sum(numbackends) FROM pg_stat_database) as total_connections\n        `);\n        \n        // Handle different result structures (rows property vs direct array)\n        const statsData = dbStats.rows || dbStats || [];\n        connectionCount = Number(statsData[0]?.active_connections || 1);\n      } catch (error) {\n        console.error('Error getting connection stats:', error);\n        connectionCount = 1;\n      }\n      \n      // Memory usage (mock for demonstration - real implementation would need system queries)\n      const memoryUsed = totalSize;\n      const memoryTotal = 100 * 1024 * 1024; // 100MB mock limit\n      const memoryPercentage = Math.min((memoryUsed / memoryTotal) * 100, 100);\n\n      let healthStatus: 'healthy' | 'warning' | 'critical' = 'healthy';\n      if (memoryPercentage > 80) healthStatus = 'critical';\n      else if (memoryPercentage > 60) healthStatus = 'warning';\n\n      return {\n        tables,\n        totalSize,\n        totalSizeMB,\n        totalRecords,\n        memoryUsage: {\n          used: memoryUsed,\n          total: memoryTotal,\n          percentage: Math.round(memoryPercentage)\n        },\n        connectionCount,\n        queryCount: totalRecords * 3, // Mock query count\n        healthStatus\n      };\n    } catch (error) {\n      console.error('Error getting database stats:', error);\n      // Return fallback stats if database queries fail\n      return {\n        tables: [],\n        totalSize: 0,\n        totalSizeMB: 0,\n        totalRecords: 0,\n        memoryUsage: {\n          used: 0,\n          total: 100 * 1024 * 1024,\n          percentage: 0\n        },\n        connectionCount: 0,\n        queryCount: 0,\n        healthStatus: 'critical' as const\n      };\n    }\n  }\n}\n\n// Initialize sample data for demonstration\nasync function initSampleData() {\n  try {\n    // Check if data already exists\n    const existingUsers = await db.select().from(users).limit(1);\n    if (existingUsers.length > 0) {\n      console.log(\"Sample data already exists, skipping initialization\");\n      return;\n    }\n\n    console.log(\"Initializing sample data...\");\n\n    // Create sample admin user (password: admin123)\n    const adminUser = await db.insert(users).values([{\n      name: \"John Admin\",\n      email: \"admin@srlogistics.com\",\n      password: \"$2b$10$ubTkp.g4BDWCejM.hf.63.zkn1Ap73pRxNO2LQvMpO6Yy9TgC0p9a\", // bcrypt hash of \"admin123\"\n      role: \"admin\" as const\n    }]).returning();\n    \n    // Create sample driver user (password: driver123)\n    const driverUser = await db.insert(users).values([{\n      name: \"Mike Driver\",\n      email: \"driver@srlogistics.com\",\n      password: \"$2b$10$gAAttSPm6MVsQkKdlFqNUe6hRVjwuU3mqM2ens9UkyFKC7R1w3YzC\", // bcrypt hash of \"driver123\"\n      role: \"driver\" as const\n    }]).returning();\n    \n    // Create sample vehicles\n    const vehicle1 = await db.insert(vehicles).values([{\n      numberPlate: \"TRK-001\",\n      type: \"Truck\",\n      status: \"available\" as const\n    }]).returning();\n    \n    const vehicle2 = await db.insert(vehicles).values([{\n      numberPlate: \"VAN-205\",\n      type: \"Van\",\n      status: \"in_use\" as const\n    }]).returning();\n    \n    // Create sample trip\n    await db.insert(trips).values([{\n      driverId: driverUser[0].id,\n      vehicleId: vehicle2[0].id,\n      route: \"Warehouse A → Customer Site\",\n      status: \"assigned\" as const\n    }]);\n\n    console.log(\"Sample data initialized successfully\");\n  } catch (error) {\n    console.error(\"Error initializing sample data:\", error);\n  }\n}\n\n// Initialize storage with proper database connectivity check\nlet storage: IStorage;\n\nasync function initializeStorage(): Promise<IStorage> {\n  const dbConnection = await initializeDatabase();\n  \n  if (dbConnection) {\n    console.log(\"Using database storage\");\n    storage = new DatabaseStorage();\n    // Initialize sample data for database\n    try {\n      await initSampleData();\n    } catch (error) {\n      console.error(\"Failed to initialize sample data, falling back to in-memory storage:\", error);\n      storage = new MemStorage();\n    }\n  } else {\n    console.log(\"Using in-memory storage\");\n    storage = new MemStorage();\n  }\n  \n  return storage;\n}\n\n// Initialize storage asynchronously but export synchronously for compatibility\nstorage = new MemStorage(); // Default fallback\n\ninitializeStorage().then((initializedStorage) => {\n  storage = initializedStorage;\n}).catch((error) => {\n  console.error(\"Storage initialization failed, using in-memory storage:\", error);\n  storage = new MemStorage();\n});\n\nexport { storage };\n","size_bytes":24573},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table with role-based access (admin or driver)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().$type<\"admin\" | \"driver\">(),\n  status: text(\"status\").$type<\"available\" | \"on_trip\">().default(\"available\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Vehicles table\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  numberPlate: text(\"number_plate\").notNull().unique(),\n  type: text(\"type\").notNull(), // truck, van, car, etc.\n  status: text(\"status\").notNull().$type<\"available\" | \"in_use\" | \"maintenance\">(),\n  model: text(\"model\"),\n  year: text(\"year\"),\n  fuelType: text(\"fuel_type\").$type<\"diesel\" | \"petrol\" | \"electric\" | \"hybrid\">(),\n  capacity: decimal(\"capacity\", { precision: 8, scale: 2 }), // kg or liters\n  mileage: decimal(\"mileage\", { precision: 10, scale: 2 }), // km\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Trips table\nexport const trips = pgTable(\"trips\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").notNull().references(() => users.id),\n  vehicleId: varchar(\"vehicle_id\").notNull().references(() => vehicles.id),\n  route: text(\"route\").notNull(),\n  status: text(\"status\").notNull().$type<\"assigned\" | \"in_progress\" | \"completed\" | \"cancelled\">(),\n  startLocation: text(\"start_location\"),\n  endLocation: text(\"end_location\"),\n  distance: decimal(\"distance\", { precision: 8, scale: 2 }), // km\n  estimatedDuration: decimal(\"estimated_duration\", { precision: 6, scale: 2 }), // hours\n  fuelConsumed: decimal(\"fuel_consumed\", { precision: 8, scale: 2 }), // liters\n  driverWage: decimal(\"driver_wage\", { precision: 10, scale: 2 }), // rupees\n  priority: text(\"priority\").$type<\"low\" | \"medium\" | \"high\" | \"urgent\">().default(\"medium\"),\n  notes: text(\"notes\"),\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Locations table for real-time tracking\nexport const locations = pgTable(\"locations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tripId: varchar(\"trip_id\").notNull().references(() => trips.id),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  altitude: decimal(\"altitude\", { precision: 8, scale: 2 }), // meters\n  speed: decimal(\"speed\", { precision: 6, scale: 2 }), // km/h\n  heading: decimal(\"heading\", { precision: 6, scale: 2 }), // degrees\n  accuracy: decimal(\"accuracy\", { precision: 6, scale: 2 }), // meters\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Database statistics table for monitoring\nexport const dbStats = pgTable(\"db_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tableName: text(\"table_name\").notNull(),\n  recordCount: decimal(\"record_count\", { precision: 12, scale: 0 }).notNull(),\n  sizeBytes: decimal(\"size_bytes\", { precision: 15, scale: 0 }).notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTripSchema = createInsertSchema(trips).omit({\n  id: true,\n  createdAt: true,\n  startTime: true,\n  endTime: true,\n});\n\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertDbStatsSchema = createInsertSchema(dbStats).omit({\n  id: true,\n  lastUpdated: true,\n});\n\n// TypeScript types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertTrip = z.infer<typeof insertTripSchema>;\nexport type Trip = typeof trips.$inferSelect;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\nexport type Location = typeof locations.$inferSelect;\nexport type InsertDbStats = z.infer<typeof insertDbStatsSchema>;\nexport type DbStats = typeof dbStats.$inferSelect;\n","size_bytes":4657},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { motion } from \"framer-motion\";\n\n// Components\nimport LoginForm from \"./components/LoginForm\";\nimport AdminDashboard from \"./components/AdminDashboard\";\nimport DriverPortal from \"./components/DriverPortal\";\nimport DriverDashboard from \"./components/DriverDashboard\";\nimport VehicleManagement from \"./components/VehicleManagement\";\nimport DriverManagement from \"./components/DriverManagement\";\nimport TripManagement from \"./components/TripManagement\";\nimport LiveMap from \"./components/LiveMap\";\nimport AppSidebar from \"./components/AppSidebar\";\nimport ThemeToggle from \"./components/ThemeToggle\";\nimport { ThemeProvider } from \"./components/ThemeProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport Analytics from \"@/pages/Analytics\";\nimport DatabaseMonitor from \"./components/DatabaseMonitor\";\n\ntype User = {\n  id: string;\n  name: string;\n  email: string;\n  role: \"admin\" | \"driver\";\n  createdAt: Date;\n};\n\nfunction Router() {\n  const [user, setUser] = useState<User | null>(null);\n  const [location, setLocation] = useLocation();\n\n  const handleLogin = (user: User) => {\n    setUser(user);\n    \n    // Redirect based on role\n    if (user.role === \"admin\") {\n      setLocation(\"/dashboard\");\n    } else {\n      setLocation(\"/trips\");\n    }\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    setLocation(\"/\");\n  };\n\n  const handleNavigate = (path: string) => {\n    setLocation(path);\n  };\n\n  const handleManageDrivers = () => {\n    setLocation(\"/drivers\");\n  };\n\n  const handleManageVehicles = () => {\n    setLocation(\"/vehicles\");\n  };\n\n  const handleManageTrips = () => {\n    setLocation(\"/trips\");\n  };\n\n  // If not logged in, show login\n  if (!user) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={() => <LoginForm onLogin={handleLogin} />} />\n        <Route component={() => <LoginForm onLogin={handleLogin} />} />\n      </Switch>\n    );\n  }\n\n  // Sidebar style for fleet management\n  const sidebarStyle = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar \n          userRole={user.role}\n          userName={user.name}\n          currentPath={location}\n          onNavigate={handleNavigate}\n          onLogout={handleLogout}\n        />\n        \n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          {/* Header */}\n          <motion.header \n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\"\n          >\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <div>\n                <h2 className=\"text-lg font-semibold text-foreground\">\n                  {user.role === \"admin\" ? \"Fleet Management\" : \"Driver Portal\"}\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  {user.role === \"admin\" \n                    ? \"Monitor and manage your fleet operations\" \n                    : \"View your trips and assignments\"\n                  }\n                </p>\n              </div>\n            </div>\n            <ThemeToggle />\n          </motion.header>\n\n          {/* Main Content */}\n          <main className=\"flex-1 overflow-auto\">\n            <Switch>\n              {user.role === \"admin\" ? (\n                <>\n                  <Route path=\"/dashboard\" component={() => \n                    <AdminDashboard \n                      onManageDrivers={handleManageDrivers}\n                      onManageVehicles={handleManageVehicles}\n                      onManageTrips={handleManageTrips}\n                    />\n                  } />\n                  <Route path=\"/vehicles\" component={() => <VehicleManagement />} />\n                  <Route path=\"/drivers\" component={() => <DriverManagement />} />\n                  <Route path=\"/trips\" component={() => <TripManagement />} />\n                  <Route path=\"/map\" component={() => \n                    <div className=\"p-6 h-full\">\n                      <div className=\"h-full\">\n                        <LiveMap />\n                      </div>\n                    </div>\n                  } />\n                  <Route path=\"/analytics\" component={() => <Analytics />} />\n                  <Route path=\"/settings\" component={() => \n                    <div className=\"p-6 space-y-6\">\n                      <div>\n                        <h1 className=\"text-2xl font-bold mb-2\">System Settings</h1>\n                        <p className=\"text-muted-foreground\">Monitor database performance and system configuration.</p>\n                      </div>\n                      <DatabaseMonitor />\n                    </div>\n                  } />\n                  <Route component={() => <AdminDashboard \n                    onManageDrivers={handleManageDrivers}\n                    onManageVehicles={handleManageVehicles}\n                    onManageTrips={handleManageTrips}\n                  />} />\n                </>\n              ) : (\n                <>\n                  <Route path=\"/dashboard\" component={() => <DriverDashboard driverId={user.id} />} />\n                  <Route path=\"/trips\" component={() => <DriverPortal driverName={user.name} driverId={user.id} />} />\n                  <Route path=\"/history\" component={() => \n                    <div className=\"p-6\">\n                      <h1 className=\"text-2xl font-bold mb-4\">Trip History</h1>\n                      <p className=\"text-muted-foreground\">Detailed trip history and statistics will be implemented here.</p>\n                    </div>\n                  } />\n                  <Route component={() => <DriverDashboard driverId={user.id} />} />\n                </>\n              )}\n            </Switch>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"sr-logistics-theme\">\n        <TooltipProvider>\n          <Router />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6760},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 14% 96%;\n\n  --foreground: 220 9% 15%;\n\n  --border: 220 13% 85%;\n\n  --card: 220 14% 98%;\n\n  --card-foreground: 220 9% 15%;\n\n  --card-border: 220 13% 90%;\n\n  --sidebar: 220 14% 94%;\n\n  --sidebar-foreground: 220 9% 15%;\n\n  --sidebar-border: 220 13% 88%;\n\n  --sidebar-primary: 220 85% 45%;\n\n  --sidebar-primary-foreground: 220 14% 96%;\n\n  --sidebar-accent: 220 15% 88%;\n\n  --sidebar-accent-foreground: 220 9% 20%;\n\n  --sidebar-ring: 220 85% 45%;\n\n  --popover: 220 14% 92%;\n\n  --popover-foreground: 220 9% 15%;\n\n  --popover-border: 220 13% 86%;\n\n  --primary: 220 85% 45%;\n\n  --primary-foreground: 220 14% 96%;\n\n  --secondary: 220 14% 90%;\n\n  --secondary-foreground: 220 9% 20%;\n\n  --muted: 220 15% 89%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 15% 91%;\n\n  --accent-foreground: 220 9% 20%;\n\n  --destructive: 0 84% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 80%;\n  --ring: 220 85% 45%;\n  --chart-1: 220 85% 45%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 270 75% 60%;\n  --chart-5: 15 85% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 9% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 9% / 0.1), 0px 1px 2px 0px hsl(220 13% 9% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 13% 9% / 0.1), 0px 1px 2px 0px hsl(220 13% 9% / 0.06);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 9% / 0.1), 0px 1px 2px 0px hsl(220 13% 9% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 9% / 0.1), 0px 2px 4px -1px hsl(220 13% 9% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 9% / 0.1), 0px 4px 6px -2px hsl(220 13% 9% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 9% / 0.1), 0px 10px 10px -5px hsl(220 13% 9% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 9% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 9%;\n\n  --foreground: 220 14% 85%;\n\n  --border: 220 13% 18%;\n\n  --card: 220 13% 11%;\n\n  --card-foreground: 220 14% 85%;\n\n  --card-border: 220 13% 20%;\n\n  --sidebar: 220 13% 13%;\n\n  --sidebar-foreground: 220 14% 85%;\n\n  --sidebar-border: 220 13% 22%;\n\n  --sidebar-primary: 220 85% 45%;\n\n  --sidebar-primary-foreground: 220 14% 96%;\n\n  --sidebar-accent: 220 13% 15%;\n\n  --sidebar-accent-foreground: 220 14% 80%;\n\n  --sidebar-ring: 220 85% 45%;\n\n  --popover: 220 13% 15%;\n\n  --popover-foreground: 220 14% 85%;\n\n  --popover-border: 220 13% 24%;\n\n  --primary: 220 85% 45%;\n\n  --primary-foreground: 220 14% 96%;\n\n  --secondary: 220 13% 17%;\n\n  --secondary-foreground: 220 14% 80%;\n\n  --muted: 220 13% 16%;\n\n  --muted-foreground: 220 14% 65%;\n\n  --accent: 220 13% 17%;\n\n  --accent-foreground: 220 14% 80%;\n\n  --destructive: 0 84% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 25%;\n  --ring: 220 85% 45%;\n  --chart-1: 220 75% 60%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 38 85% 60%;\n  --chart-4: 270 70% 70%;\n  --chart-5: 15 80% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 4% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 4% / 0.4), 0px 1px 2px 0px hsl(220 13% 4% / 0.3);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 13% 4% / 0.4), 0px 1px 2px 0px hsl(220 13% 4% / 0.3);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 4% / 0.4), 0px 1px 2px 0px hsl(220 13% 4% / 0.3);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 4% / 0.4), 0px 2px 4px -1px hsl(220 13% 4% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 4% / 0.4), 0px 4px 6px -2px hsl(220 13% 4% / 0.2);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 4% / 0.4), 0px 10px 10px -5px hsl(220 13% 4% / 0.15);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 4% / 0.6);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Custom truck tooltip styling */\n  .custom-truck-tooltip {\n    background: rgba(0, 0, 0, 0.9) !important;\n    border: 1px solid rgba(255, 255, 255, 0.2) !important;\n    border-radius: 6px !important;\n    color: white !important;\n    font-size: 12px !important;\n    padding: 0 !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4) !important;\n    backdrop-filter: blur(8px);\n    max-width: 200px !important;\n  }\n\n  .custom-truck-tooltip .leaflet-tooltip-content {\n    margin: 0 !important;\n    padding: 0 !important;\n  }\n\n  /* Vehicle marker animations */\n  .vehicle-marker {\n    transition: transform 0.3s ease, filter 0.3s ease;\n  }\n\n  .vehicle-marker:hover {\n    transform: scale(1.1);\n    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));\n  }\n\n  .selected-vehicle-marker {\n    transform: scale(1.15);\n    filter: drop-shadow(0 6px 12px rgba(59, 130, 246, 0.4));\n    animation: pulse-selected 2s infinite;\n  }\n\n  @keyframes pulse-selected {\n    0%, 100% {\n      transform: scale(1.15);\n    }\n    50% {\n      transform: scale(1.2);\n    }\n  }\n\n  /* Leaflet popup customization for better UI consistency */\n  .leaflet-popup-content-wrapper {\n    border-radius: 8px !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;\n  }\n\n  .leaflet-popup-tip {\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;\n  }\n}","size_bytes":11245},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Car, \n  Users, \n  MapPin, \n  Clock, \n  TrendingUp, \n  Activity,\n  Plus,\n  Filter\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Trip, Vehicle, User } from \"@shared/schema\";\nimport LiveMap from \"./LiveMap\";\n\n// Extended trip interface with driver and vehicle details\ninterface TripWithDetails extends Trip {\n  driverName?: string;\n  vehiclePlate?: string;\n  progress?: number;\n}\n\ninterface AdminDashboardProps {\n  onManageDrivers: () => void;\n  onManageVehicles: () => void;\n  onManageTrips: () => void;\n}\n\nexport default function AdminDashboard({ \n  onManageDrivers, \n  onManageVehicles, \n  onManageTrips \n}: AdminDashboardProps) {\n  const [selectedTrip, setSelectedTrip] = useState<string | null>(null);\n\n  // Fetch real data\n  const { data: vehicles = [], isLoading: vehiclesLoading } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles'],\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n    refetchInterval: 30000\n  });\n\n  const { data: trips = [], isLoading: tripsLoading } = useQuery<Trip[]>({\n    queryKey: ['/api/trips'],\n    refetchInterval: 5000 // Refresh every 5 seconds for real-time updates\n  });\n\n  // Calculate real stats\n  const stats = {\n    totalVehicles: vehicles.length,\n    activeDrivers: users.filter(user => user.role === 'driver').length,\n    activeTrips: trips.filter(trip => trip.status === 'in_progress').length,\n    completedToday: trips.filter(trip => {\n      if (trip.status !== 'completed' || !trip.endTime) return false;\n      const today = new Date().toDateString();\n      return new Date(trip.endTime).toDateString() === today;\n    }).length\n  };\n\n  // Get active trips with details\n  const activeTrips: TripWithDetails[] = trips\n    .filter(trip => trip.status === 'in_progress' || trip.status === 'assigned')\n    .map(trip => {\n      const driver = users.find(user => user.id === trip.driverId);\n      const vehicle = vehicles.find(v => v.id === trip.vehicleId);\n      \n      // Calculate progress based on time elapsed\n      let progress = 0;\n      if (trip.startTime) {\n        const startTime = new Date(trip.startTime).getTime();\n        const now = Date.now();\n        const elapsed = now - startTime;\n        // Assume 4 hours for a typical trip, calculate progress\n        progress = Math.min(Math.round((elapsed / (4 * 60 * 60 * 1000)) * 100), 95);\n      }\n      \n      return {\n        ...trip,\n        driverName: driver?.name || 'Unknown Driver',\n        vehiclePlate: vehicle?.numberPlate || 'Unknown Vehicle',\n        progress: trip.status === 'assigned' ? 0 : progress\n      };\n    });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"in_progress\": return \"bg-blue-500\";\n      case \"completed\": return \"bg-green-500\";\n      case \"assigned\": return \"bg-yellow-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Fleet operations overview</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filter\n          </Button>\n          <Button size=\"sm\" onClick={onManageTrips} data-testid=\"button-new-trip\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Trip\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }}>\n          <Card className=\"hover-elevate cursor-pointer\" onClick={onManageVehicles} data-testid=\"card-vehicles\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Vehicles</CardTitle>\n              <Car className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {vehiclesLoading ? (\n                <Skeleton className=\"h-8 w-12\" />\n              ) : (\n                <div className=\"text-2xl font-bold\">{stats.totalVehicles}</div>\n              )}\n              <div className=\"flex items-center text-xs text-green-600 mt-1\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                {vehicles.filter(v => v.status === 'available').length} available\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }}>\n          <Card className=\"hover-elevate cursor-pointer\" onClick={onManageDrivers} data-testid=\"card-drivers\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Drivers</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <Skeleton className=\"h-8 w-12\" />\n              ) : (\n                <div className=\"text-2xl font-bold\">{stats.activeDrivers}</div>\n              )}\n              <div className=\"flex items-center text-xs text-blue-600 mt-1\">\n                <Activity className=\"w-3 h-3 mr-1\" />\n                Total drivers\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }}>\n          <Card className=\"hover-elevate\" data-testid=\"card-active-trips\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Trips</CardTitle>\n              <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {tripsLoading ? (\n                <Skeleton className=\"h-8 w-12\" />\n              ) : (\n                <div className=\"text-2xl font-bold\">{stats.activeTrips}</div>\n              )}\n              <div className=\"flex items-center text-xs text-orange-600 mt-1\">\n                <Clock className=\"w-3 h-3 mr-1\" />\n                In progress\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }}>\n          <Card className=\"hover-elevate\" data-testid=\"card-completed\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Completed Today</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {tripsLoading ? (\n                <Skeleton className=\"h-8 w-12\" />\n              ) : (\n                <div className=\"text-2xl font-bold\">{stats.completedToday}</div>\n              )}\n              <div className=\"flex items-center text-xs text-green-600 mt-1\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                Today\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* Active Trips & Live Map */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Active Trips */}\n        <motion.div \n          initial={{ opacity: 0, x: -20 }} \n          animate={{ opacity: 1, x: 0 }} \n          transition={{ delay: 0.5 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Trips</CardTitle>\n              <CardDescription>Real-time trip monitoring</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {tripsLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"p-4 rounded-lg border\">\n                      <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-3 w-1/2 mb-2\" />\n                      <Skeleton className=\"h-2 w-full\" />\n                    </div>\n                  ))}\n                </div>\n              ) : activeTrips.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  <Clock className=\"w-8 h-8 mx-auto mb-2\" />\n                  <p>No active trips</p>\n                </div>\n              ) : (\n                activeTrips.map((trip, index) => (\n                  <motion.div\n                    key={trip.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.6 + index * 0.1 }}\n                    className={`p-4 rounded-lg border hover-elevate cursor-pointer transition-all ${\n                      selectedTrip === trip.id ? 'ring-2 ring-primary border-primary' : 'border-border'\n                    }`}\n                    onClick={() => setSelectedTrip(selectedTrip === trip.id ? null : trip.id)}\n                    data-testid={`trip-${trip.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-2 h-2 rounded-full ${getStatusColor(trip.status)}`} />\n                        <span className=\"font-medium\">{trip.driverName}</span>\n                      </div>\n                      <Badge variant=\"secondary\">{trip.vehiclePlate}</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{trip.route}</p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        {trip.startTime \n                          ? `Started: ${new Date(trip.startTime).toLocaleTimeString()}`\n                          : `Status: ${trip.status}`\n                        }\n                      </span>\n                      <span className=\"text-xs font-medium\">{trip.progress || 0}% complete</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-1.5 mt-2\">\n                      <div \n                        className=\"bg-primary h-1.5 rounded-full transition-all duration-300\" \n                        style={{ width: `${trip.progress || 0}%` }}\n                      />\n                    </div>\n                  </motion.div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Live Map */}\n        <motion.div \n          initial={{ opacity: 0, x: 20 }} \n          animate={{ opacity: 1, x: 0 }} \n          transition={{ delay: 0.7 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle>Live Fleet Map</CardTitle>\n              <CardDescription>Real-time vehicle locations</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"aspect-square rounded-lg overflow-hidden\">\n                <LiveMap \n                  selectedTripId={selectedTrip} \n                  onTripSelect={setSelectedTrip}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":12109},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Home,\n  Car,\n  Users,\n  Route,\n  MapPin,\n  BarChart3,\n  Settings,\n  LogOut,\n  Truck\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface AppSidebarProps {\n  userRole: \"admin\" | \"driver\";\n  userName: string;\n  currentPath: string;\n  onNavigate: (path: string) => void;\n  onLogout: () => void;\n}\n\nexport default function AppSidebar({ \n  userRole, \n  userName, \n  currentPath, \n  onNavigate, \n  onLogout \n}: AppSidebarProps) {\n  const adminMenuItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/dashboard\",\n      icon: Home,\n    },\n    {\n      title: \"Vehicles\",\n      url: \"/vehicles\",\n      icon: Car,\n    },\n    {\n      title: \"Drivers\",\n      url: \"/drivers\",\n      icon: Users,\n    },\n    {\n      title: \"Trips\",\n      url: \"/trips\",\n      icon: Route,\n    },\n    {\n      title: \"Live Map\",\n      url: \"/map\",\n      icon: MapPin,\n    },\n    {\n      title: \"Analytics\",\n      url: \"/analytics\",\n      icon: BarChart3,\n    },\n  ];\n\n  const driverMenuItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/dashboard\",\n      icon: Home,\n    },\n    {\n      title: \"My Trips\",\n      url: \"/trips\",\n      icon: Route,\n    },\n    {\n      title: \"Trip History\",\n      url: \"/history\",\n      icon: BarChart3,\n    },\n  ];\n\n  const menuItems = userRole === \"admin\" ? adminMenuItems : driverMenuItems;\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <motion.div \n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"flex items-center gap-3\"\n        >\n          <div className=\"w-10 h-10 bg-primary rounded-xl flex items-center justify-center\">\n            <Truck className=\"w-6 h-6 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-bold text-sidebar-foreground\">SR Logistics</h2>\n            <p className=\"text-xs text-sidebar-foreground/70 capitalize\">{userRole} Portal</p>\n          </div>\n        </motion.div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item, index) => (\n                <motion.div\n                  key={item.title}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      asChild\n                      isActive={currentPath === item.url}\n                      data-testid={`sidebar-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <button \n                        onClick={() => onNavigate(item.url)}\n                        className=\"w-full flex items-center gap-3\"\n                      >\n                        <item.icon className=\"w-4 h-4\" />\n                        <span>{item.title}</span>\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                </motion.div>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {userRole === \"admin\" && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Settings</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={currentPath === \"/settings\"}\n                    data-testid=\"sidebar-settings\"\n                  >\n                    <button \n                      onClick={() => onNavigate(\"/settings\")}\n                      className=\"w-full flex items-center gap-3\"\n                    >\n                      <Settings className=\"w-4 h-4\" />\n                      <span>Settings</span>\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"space-y-3\"\n        >\n          <div className=\"flex items-center gap-3 p-2\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarFallback className=\"text-xs font-medium\">\n                {userName.split(' ').map(n => n[0]).join('').toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-sidebar-foreground truncate\">{userName}</p>\n              <p className=\"text-xs text-sidebar-foreground/70 capitalize\">{userRole}</p>\n            </div>\n          </div>\n          \n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={onLogout}\n            className=\"w-full justify-start text-sidebar-foreground hover:text-sidebar-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Sign Out\n          </Button>\n        </motion.div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":5710},"client/src/components/DriverPortal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  MapPin, \n  Clock, \n  Play, \n  Square, \n  Route,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Trip, Vehicle, User } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Extended trip interface with vehicle details\ninterface TripWithDetails extends Trip {\n  vehiclePlate?: string;\n  progress?: number;\n}\n\ninterface DriverPortalProps {\n  driverName: string;\n  driverId: string;\n}\n\nexport default function DriverPortal({ driverName, driverId }: DriverPortalProps) {\n  const [activeTrip, setActiveTrip] = useState<string | null>(null);\n  const [locationSharing, setLocationSharing] = useState(false);\n  const [currentPosition, setCurrentPosition] = useState<GeolocationPosition | null>(null);\n  const { toast } = useToast();\n\n  // Location tracking interval\n  const locationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Fetch driver's trips\n  const { data: allTrips = [], isLoading: tripsLoading } = useQuery<Trip[]>({\n    queryKey: ['/api/trips'],\n    refetchInterval: 5000 // Real-time updates\n  });\n\n  // Fetch vehicles for trip details\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles']\n  });\n\n  // Filter trips for current driver\n  const driverTrips = allTrips.filter(trip => trip.driverId === driverId);\n  const activeTrips = driverTrips.filter(trip => trip.status === 'assigned' || trip.status === 'in_progress');\n  const completedTrips = driverTrips.filter(trip => trip.status === 'completed').slice(0, 5); // Last 5 completed\n\n  // Create trips with vehicle details\n  const tripsWithDetails: TripWithDetails[] = activeTrips.map(trip => {\n    const vehicle = vehicles.find(v => v.id === trip.vehicleId);\n    \n    // Calculate progress for in-progress trips\n    let progress = 0;\n    if (trip.status === 'in_progress' && trip.startTime) {\n      const startTime = new Date(trip.startTime).getTime();\n      const now = Date.now();\n      const elapsed = now - startTime;\n      // Assume 4 hours for a typical trip\n      progress = Math.min(Math.round((elapsed / (4 * 60 * 60 * 1000)) * 100), 95);\n    }\n    \n    return {\n      ...trip,\n      vehiclePlate: vehicle?.numberPlate || 'Unknown Vehicle',\n      progress: trip.status === 'assigned' ? 0 : progress\n    };\n  });\n\n  // Trip update mutation\n  const updateTripMutation = useMutation({\n    mutationFn: async ({ tripId, status, startTime, endTime }: { \n      tripId: string; \n      status: string; \n      startTime?: string; \n      endTime?: string; \n    }) => {\n      const response = await apiRequest('PUT', `/api/trips/${tripId}`, {\n        status,\n        ...(startTime && { startTime }),\n        ...(endTime && { endTime })\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/trips'] });\n    }\n  });\n\n  // Location update mutation\n  const sendLocationMutation = useMutation({\n    mutationFn: async ({ tripId, latitude, longitude }: {\n      tripId: string;\n      latitude: number;\n      longitude: number;\n    }) => {\n      const response = await apiRequest('POST', `/api/trips/${tripId}/locations`, {\n        latitude: latitude.toString(),\n        longitude: longitude.toString()\n      });\n      return response.json();\n    },\n    onError: (error) => {\n      console.error('Error sending location:', error);\n    }\n  });\n\n  // Start location tracking\n  const startLocationTracking = (tripId: string) => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location not supported\",\n        description: \"Your browser doesn't support location tracking\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Get initial position\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setCurrentPosition(position);\n        // Send initial location\n        sendLocationMutation.mutate({\n          tripId,\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      },\n      (error) => {\n        console.error('Geolocation error:', error);\n        toast({\n          title: \"Location access denied\",\n          description: \"Please allow location access to track your trip\",\n          variant: \"destructive\"\n        });\n      }\n    );\n\n    // Start periodic location updates every 30 seconds\n    locationIntervalRef.current = setInterval(() => {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setCurrentPosition(position);\n          sendLocationMutation.mutate({\n            tripId,\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n        }\n      );\n    }, 30000); // Update every 30 seconds\n  };\n\n  // Stop location tracking\n  const stopLocationTracking = () => {\n    if (locationIntervalRef.current) {\n      clearInterval(locationIntervalRef.current);\n      locationIntervalRef.current = null;\n    }\n    setCurrentPosition(null);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"assigned\": return \"bg-yellow-500\";\n      case \"in_progress\": return \"bg-blue-500\";\n      case \"completed\": return \"bg-green-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"destructive\";\n      case \"medium\": return \"secondary\";\n      case \"low\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  const handleStartTrip = async (tripId: string) => {\n    try {\n      await updateTripMutation.mutateAsync({\n        tripId,\n        status: 'in_progress',\n        startTime: new Date().toISOString()\n      });\n      setActiveTrip(tripId);\n      setLocationSharing(true);\n      \n      // Start location tracking\n      startLocationTracking(tripId);\n      \n      toast({\n        title: \"Trip started\",\n        description: \"Location sharing is now active\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start trip\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleEndTrip = async () => {\n    if (!activeTrip) return;\n    \n    try {\n      await updateTripMutation.mutateAsync({\n        tripId: activeTrip,\n        status: 'completed',\n        endTime: new Date().toISOString()\n      });\n      \n      // Stop location tracking\n      stopLocationTracking();\n      \n      setActiveTrip(null);\n      setLocationSharing(false);\n      toast({\n        title: \"Trip completed\",\n        description: \"Well done! Trip marked as completed\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete trip\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <motion.h1 \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-3xl font-bold text-foreground\"\n        >\n          Welcome back, {driverName}\n        </motion.h1>\n        <p className=\"text-muted-foreground mt-2\">Your trips and assignments</p>\n        {locationSharing && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"inline-flex items-center gap-2 bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 px-3 py-1 rounded-full text-sm mt-3\"\n          >\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n            Location sharing active\n          </motion.div>\n        )}\n      </div>\n\n      {/* Assigned Trips */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.2 }}\n      >\n        <Card>\n          <CardHeader>\n            <CardTitle>My Trips</CardTitle>\n            <CardDescription>Your assigned and active trips</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {tripsLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"p-4 rounded-lg border\">\n                    <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-3 w-1/2 mb-2\" />\n                    <Skeleton className=\"h-8 w-24\" />\n                  </div>\n                ))}\n              </div>\n            ) : tripsWithDetails.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-8\">\n                <Route className=\"w-8 h-8 mx-auto mb-2\" />\n                <p>No active trips assigned</p>\n                <p className=\"text-sm\">Check back later for new assignments</p>\n              </div>\n            ) : (\n              tripsWithDetails.map((trip, index) => (\n              <motion.div\n                key={trip.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: 0.3 + index * 0.1 }}\n                className={`p-4 rounded-lg border hover-elevate transition-all ${\n                  activeTrip === trip.id ? 'ring-2 ring-primary border-primary bg-primary/5' : 'border-border'\n                }`}\n                data-testid={`driver-trip-${trip.id}`}\n              >\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-3 h-3 rounded-full ${getStatusColor(trip.status)}`} />\n                    <div>\n                      <h3 className=\"font-semibold\">{trip.route}</h3>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground mt-1\">\n                        <span className=\"flex items-center gap-1\">\n                          <Route className=\"w-3 h-3\" />\n                          {trip.vehiclePlate}\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          {trip.createdAt ? new Date(trip.createdAt).toLocaleTimeString() : 'N/A'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\">\n                      {trip.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </div>\n\n                {trip.status === \"in_progress\" && trip.progress && (\n                  <div className=\"mb-3\">\n                    <div className=\"flex items-center justify-between text-sm mb-1\">\n                      <span>Progress</span>\n                      <span>{trip.progress}% complete</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                        style={{ width: `${trip.progress}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    {trip.startTime ? `Started: ${new Date(trip.startTime).toLocaleTimeString()}` : 'Not started yet'}\n                  </span>\n                  \n                  {trip.status === \"assigned\" ? (\n                    <Button \n                      size=\"sm\" \n                      onClick={() => handleStartTrip(trip.id)}\n                      data-testid={`button-start-trip-${trip.id}`}\n                    >\n                      <Play className=\"w-3 h-3 mr-1\" />\n                      Start Trip\n                    </Button>\n                  ) : trip.status === \"in_progress\" && activeTrip === trip.id ? (\n                    <Button \n                      size=\"sm\" \n                      variant=\"destructive\"\n                      onClick={handleEndTrip}\n                      data-testid={`button-end-trip-${trip.id}`}\n                    >\n                      <Square className=\"w-3 h-3 mr-1\" />\n                      End Trip\n                    </Button>\n                  ) : (\n                    <Badge variant=\"secondary\">\n                      {trip.status.replace('_', ' ')}\n                    </Badge>\n                  )}\n                </div>\n              </motion.div>\n            ))\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Trip History */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.5 }}\n      >\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Trips</CardTitle>\n            <CardDescription>Your completed trip history</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {completedTrips.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-6\">\n                <CheckCircle className=\"w-6 h-6 mx-auto mb-2\" />\n                <p>No completed trips yet</p>\n              </div>\n            ) : (\n              completedTrips.map((trip, index) => {\n                const vehicle = vehicles.find(v => v.id === trip.vehicleId);\n                const completedTime = trip.endTime ? new Date(trip.endTime).toLocaleDateString() : 'Unknown';\n                const duration = trip.startTime && trip.endTime \n                  ? `${Math.round((new Date(trip.endTime).getTime() - new Date(trip.startTime).getTime()) / (1000 * 60 * 60))}h`\n                  : 'Unknown';\n                \n                return (\n                  <motion.div\n                    key={trip.id}\n                    initial={{ opacity: 0, x: -10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.6 + index * 0.1 }}\n                    className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\"\n                    data-testid={`history-trip-${trip.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <div>\n                        <p className=\"font-medium\">{trip.route}</p>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <span>{vehicle?.numberPlate || 'Unknown Vehicle'}</span>\n                          <span>{completedTime}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\">{duration}</Badge>\n                  </motion.div>\n                );\n              })\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Location Status Card */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n      >\n        <Card className=\"border-dashed\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <MapPin className=\"w-5 h-5 text-muted-foreground\" />\n                <div>\n                  <h3 className=\"font-medium\">Location Tracking</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {locationSharing \n                      ? \"Your location is being shared for active trip tracking\"\n                      : \"Start a trip to enable location tracking\"\n                    }\n                  </p>\n                </div>\n              </div>\n              {locationSharing ? (\n                <AlertCircle className=\"w-5 h-5 text-green-500\" />\n              ) : (\n                <AlertCircle className=\"w-5 h-5 text-muted-foreground\" />\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":16755},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Truck, LogIn, AlertCircle } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: \"admin\" | \"driver\";\n  createdAt: Date;\n}\n\ninterface LoginFormProps {\n  onLogin: (user: User) => void;\n}\n\nexport default function LoginForm({ onLogin }: LoginFormProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        email,\n        password\n      });\n\n      const data = await response.json();\n      \n      if (data.user) {\n        toast({\n          title: \"Login successful\",\n          description: `Welcome back, ${data.user.name}!`\n        });\n        onLogin(data.user);\n      }\n    } catch (err: any) {\n      const errorMessage = err.message || \"Login failed. Please try again.\";\n      setError(errorMessage);\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: errorMessage\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 flex items-center justify-center p-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        <div className=\"text-center mb-8\">\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n            className=\"inline-flex items-center justify-center w-16 h-16 bg-primary rounded-xl mb-4\"\n          >\n            <Truck className=\"w-8 h-8 text-primary-foreground\" />\n          </motion.div>\n          <h1 className=\"text-3xl font-bold text-foreground\">SR Logistics</h1>\n          <p className=\"text-muted-foreground mt-2\">Fleet Management System</p>\n        </div>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-semibold\">Welcome back</CardTitle>\n            <CardDescription>\n              Sign in to your account to continue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n\n              {error && (\n                <motion.div\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"flex items-center gap-2 text-sm text-destructive bg-destructive/10 p-3 rounded-md\"\n                >\n                  <AlertCircle className=\"w-4 h-4\" />\n                  <span>{error}</span>\n                </motion.div>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                    className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full\"\n                  />\n                ) : (\n                  <>\n                    <LogIn className=\"w-4 h-4 mr-2\" />\n                    Sign In\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-muted-foreground mt-6\">\n          Secure fleet management for professionals\n        </p>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":5262},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1609},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport default function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":719},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminDashboard.tsx":{"content":"import AdminDashboard from '../AdminDashboard';\n\nexport default function AdminDashboardExample() {\n  const handleManageDrivers = () => {\n    console.log('Navigate to drivers management');\n  };\n\n  const handleManageVehicles = () => {\n    console.log('Navigate to vehicles management');\n  };\n\n  const handleManageTrips = () => {\n    console.log('Navigate to trips management');\n  };\n\n  return (\n    <AdminDashboard \n      onManageDrivers={handleManageDrivers}\n      onManageVehicles={handleManageVehicles}\n      onManageTrips={handleManageTrips}\n    />\n  );\n}","size_bytes":557},"client/src/components/examples/AppSidebar.tsx":{"content":"import AppSidebar from '../AppSidebar';\nimport { SidebarProvider } from '@/components/ui/sidebar';\n\nexport default function AppSidebarExample() {\n  const handleNavigate = (path: string) => {\n    console.log(`Navigate to: ${path}`);\n  };\n\n  const handleLogout = () => {\n    console.log('User logged out');\n  };\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar \n          userRole=\"admin\"\n          userName=\"John Admin\"\n          currentPath=\"/dashboard\"\n          onNavigate={handleNavigate}\n          onLogout={handleLogout}\n        />\n        <div className=\"flex-1 p-6 bg-background\">\n          <div className=\"text-center text-muted-foreground\">\n            <h3 className=\"text-lg font-medium mb-2\">Sidebar Preview</h3>\n            <p className=\"text-sm\">This is how the sidebar will look in the application</p>\n          </div>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":1069},"client/src/components/examples/DriverPortal.tsx":{"content":"import DriverPortal from '../DriverPortal';\n\nexport default function DriverPortalExample() {\n  return <DriverPortal driverName=\"John Smith\" />;\n}","size_bytes":145},"client/src/components/examples/LoginForm.tsx":{"content":"import LoginForm from '../LoginForm';\n\nexport default function LoginFormExample() {\n  const handleLogin = (email: string, password: string, role: \"admin\" | \"driver\") => {\n    console.log(`Login: ${email} as ${role}`);\n  };\n\n  return <LoginForm onLogin={handleLogin} />;\n}","size_bytes":271},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# SR Logistics Fleet Management System\n\n## Overview\n\nSR Logistics is a comprehensive fleet management web application designed to streamline operations for transportation companies. The system provides role-based access for administrators and drivers, enabling efficient vehicle management, trip coordination, and real-time location tracking. Built with modern web technologies, it offers a responsive, user-friendly interface for managing fleet operations from assignment to completion.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a React-based Single Page Application (SPA) architecture with TypeScript for type safety. The frontend is built using Vite as the build tool and bundler, providing fast development and optimized production builds. The routing system uses Wouter for client-side navigation, offering a lightweight alternative to React Router.\n\nThe UI is built with a comprehensive design system using:\n- **Tailwind CSS** for utility-first styling with custom design tokens\n- **shadcn/ui** component library for consistent, accessible UI components\n- **Radix UI** primitives for low-level accessibility and behavior\n- **Framer Motion** for smooth animations and transitions\n- **Lucide Icons** for consistent iconography\n\nThe application follows a component-based architecture with clear separation between presentation and business logic. State management is handled through React hooks and context for user authentication state.\n\n### Backend Architecture\nThe backend follows a REST API architecture built with Express.js and TypeScript. The server implements a layered architecture pattern:\n\n- **Route Layer**: Handles HTTP requests and responses with proper error handling\n- **Storage Layer**: Abstracts data access through a repository pattern interface\n- **Schema Layer**: Defines data models and validation using Zod schemas\n\nThe API provides endpoints for:\n- Authentication (login/register)\n- User management\n- Vehicle CRUD operations\n- Trip management and tracking\n- Location data for real-time tracking\n\n### Authentication & Authorization\nThe system implements a role-based authentication system with two distinct user roles:\n- **Admin**: Full access to vehicle management, driver management, and trip oversight\n- **Driver**: Limited access to assigned trips and location updates\n\nAuthentication uses bcrypt for password hashing and session-based authentication. The frontend maintains authentication state through React context, with protected routes based on user roles.\n\n### Data Storage Solutions\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database interactions. The database schema includes:\n\n- **Users table**: Stores admin and driver accounts with role-based access\n- **Vehicles table**: Manages fleet inventory with status tracking\n- **Trips table**: Coordinates trip assignments and status updates\n- **Locations table**: Stores real-time tracking data for active trips\n\nDrizzle provides schema-first development with automatic TypeScript types and migration management. The system supports both development (in-memory) and production (PostgreSQL) storage implementations.\n\n### Real-time Features\nThe application is designed to support real-time location tracking during trips, though the WebSocket implementation is prepared for but not yet fully integrated. The architecture supports:\n- Live location updates during active trips\n- Real-time trip status changes\n- Push notifications for trip assignments and completions\n\n### Development & Deployment\nThe application uses a monorepo structure with shared TypeScript types between frontend and backend. The build process creates optimized bundles for both client and server, with the server bundle including all dependencies for deployment.\n\nDevelopment features include:\n- Hot module replacement for fast development cycles\n- TypeScript compilation with strict type checking\n- ESLint and Prettier for code consistency\n- Environment-based configuration management\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Cloud PostgreSQL provider for production database hosting\n- **Drizzle Kit**: Database migration and schema management tools\n\n### UI & Design Libraries\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **shadcn/ui**: Pre-built accessible component library\n- **Radix UI**: Low-level UI primitives for accessibility\n- **Framer Motion**: Animation library for smooth user interactions\n- **Lucide Icons**: Consistent icon set for the application\n\n### Development Tools\n- **Vite**: Build tool and development server with HMR support\n- **TypeScript**: Static type checking for improved code quality\n- **Zod**: Schema validation library for runtime type safety\n- **React Hook Form**: Form handling with validation integration\n- **TanStack Query**: Data fetching and caching for API interactions\n\n### Authentication & Security\n- **bcrypt**: Password hashing for secure authentication\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### Production Services\nThe application is configured to work with cloud database providers like Neon for PostgreSQL hosting. Environment variables manage database connections and other configuration settings for different deployment environments.","size_bytes":5380},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\n\nlet db: any = null;\n\n// Async function to initialize database with connectivity check\nexport async function initializeDatabase(): Promise<any> {\n  if (!process.env.DATABASE_URL) {\n    console.log(\"DATABASE_URL not found, falling back to in-memory storage\");\n    return null;\n  }\n\n  try {\n    console.log(\"Attempting to connect to database...\");\n    const client = postgres(process.env.DATABASE_URL);\n    const drizzleDb = drizzle(client, { schema });\n    \n    // Test connectivity with a simple query\n    await drizzleDb.execute(sql`SELECT 1`);\n    console.log(\"Database connection successful\");\n    \n    db = drizzleDb;\n    return db;\n  } catch (error) {\n    console.warn(\"Database connection failed, falling back to in-memory storage:\", error);\n    return null;\n  }\n}\n\nexport { db };","size_bytes":947},"client/src/components/DriverManagement.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Users, \n  Plus, \n  Edit, \n  Trash2, \n  Search,\n  Filter,\n  Mail,\n  User\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { User as UserType, InsertUser, insertUserSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nconst driverFormSchema = insertUserSchema.extend({\n  name: insertUserSchema.shape.name.min(1, \"Name is required\"),\n  email: insertUserSchema.shape.email.email(\"Invalid email address\"),\n  password: insertUserSchema.shape.password.min(6, \"Password must be at least 6 characters\"),\n  role: insertUserSchema.shape.role.refine(val => val === \"driver\", \"Only driver role allowed\")\n});\n\nconst editDriverFormSchema = insertUserSchema.extend({\n  name: insertUserSchema.shape.name.min(1, \"Name is required\"),\n  email: insertUserSchema.shape.email.email(\"Invalid email address\"),\n  password: insertUserSchema.shape.password.min(6, \"Password must be at least 6 characters\").optional().or(insertUserSchema.shape.password.length(0)),\n  role: insertUserSchema.shape.role.refine(val => val === \"driver\", \"Only driver role allowed\")\n});\n\ntype DriverFormData = InsertUser;\n\nexport default function DriverManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingDriver, setEditingDriver] = useState<UserType | null>(null);\n  const { toast } = useToast();\n\n  // Fetch drivers (users with role 'driver')\n  const { data: allUsers = [], isLoading } = useQuery<UserType[]>({\n    queryKey: ['/api/users'],\n    refetchInterval: 30000\n  });\n\n  const drivers = allUsers.filter(user => user.role === 'driver');\n\n  // Create driver mutation\n  const createDriverMutation = useMutation({\n    mutationFn: async (data: DriverFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", {\n        ...data,\n        role: \"driver\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsCreateDialogOpen(false);\n      createForm.reset();\n      toast({\n        title: \"Driver created\",\n        description: \"New driver has been added successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error creating driver\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Update driver mutation\n  const updateDriverMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<DriverFormData> }) => {\n      const response = await apiRequest(\"PUT\", `/api/users/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setEditingDriver(null);\n      editForm.reset();\n      toast({\n        title: \"Driver updated\",\n        description: \"Driver has been updated successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error updating driver\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Delete driver mutation\n  const deleteDriverMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/users/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Driver deleted\",\n        description: \"Driver has been deleted successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error deleting driver\", \n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Create form\n  const createForm = useForm<DriverFormData>({\n    resolver: zodResolver(driverFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"driver\"\n    }\n  });\n\n  // Edit form\n  const editForm = useForm<DriverFormData>({\n    resolver: zodResolver(editDriverFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"driver\"\n    }\n  });\n\n  // Update edit form when editingDriver changes\n  React.useEffect(() => {\n    if (editingDriver) {\n      editForm.reset({\n        name: editingDriver.name,\n        email: editingDriver.email,\n        password: \"\", // Don't pre-fill password\n        role: editingDriver.role\n      });\n    }\n  }, [editingDriver, editForm]);\n\n  const onCreateSubmit = (data: DriverFormData) => {\n    createDriverMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: DriverFormData) => {\n    if (!editingDriver) return;\n    \n    // Remove password from data if it's empty (don't update password)\n    const updateData: Partial<DriverFormData> = { ...data };\n    if (!updateData.password || updateData.password.trim() === \"\") {\n      updateData.password = undefined;\n    }\n    \n    updateDriverMutation.mutate({ \n      id: editingDriver.id, \n      data: updateData \n    });\n  };\n\n  const handleDelete = (driver: UserType) => {\n    if (confirm(`Are you sure you want to delete driver ${driver.name}?`)) {\n      deleteDriverMutation.mutate(driver.id);\n    }\n  };\n\n  // Filter drivers\n  const filteredDrivers = drivers.filter((driver) => {\n    return driver.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           driver.email.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Driver Management</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your fleet drivers</p>\n        </div>\n        \n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-driver\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Driver\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Driver</DialogTitle>\n              <DialogDescription>\n                Create a new driver account\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. John Smith\" {...field} data-testid=\"input-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"e.g. john@srlogistics.com\" \n                          {...field} \n                          data-testid=\"input-email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Minimum 6 characters\" \n                          {...field} \n                          data-testid=\"input-password\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createDriverMutation.isPending}\n                    data-testid=\"button-create-driver\"\n                  >\n                    {createDriverMutation.isPending ? \"Creating...\" : \"Create Driver\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Driver Dialog */}\n        <Dialog open={!!editingDriver} onOpenChange={(open) => !open && setEditingDriver(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Driver</DialogTitle>\n              <DialogDescription>\n                Update driver information\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. John Smith\" {...field} data-testid=\"input-edit-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"e.g. john@srlogistics.com\" \n                          {...field} \n                          data-testid=\"input-edit-email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password (leave empty to keep current)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Leave empty to keep current password\" \n                          {...field} \n                          data-testid=\"input-edit-password\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditingDriver(null)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateDriverMutation.isPending}\n                    data-testid=\"button-update-driver\"\n                  >\n                    {updateDriverMutation.isPending ? \"Updating...\" : \"Update Driver\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search drivers...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Drivers Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Skeleton className=\"h-12 w-12 rounded-full\" />\n                  <div>\n                    <Skeleton className=\"h-4 w-32 mb-2\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                </div>\n                <Skeleton className=\"h-4 w-16\" />\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredDrivers.length === 0 ? (\n          <div className=\"col-span-full text-center py-12\">\n            <Users className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No drivers found</h3>\n            <p className=\"text-muted-foreground\">\n              {searchTerm \n                ? \"Try adjusting your search terms\"\n                : \"Start by adding your first driver\"\n              }\n            </p>\n          </div>\n        ) : (\n          filteredDrivers.map((driver, index) => (\n            <motion.div\n              key={driver.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <Card className=\"hover-elevate cursor-pointer\" data-testid={`driver-card-${driver.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar>\n                        <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                          {getInitials(driver.name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <CardTitle className=\"text-lg\">{driver.name}</CardTitle>\n                        <CardDescription className=\"flex items-center gap-1\">\n                          <Mail className=\"w-3 h-3\" />\n                          {driver.email}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    <Badge variant=\"default\">Driver</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Joined: {driver.createdAt ? new Date(driver.createdAt).toLocaleDateString() : 'Unknown'}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => setEditingDriver(driver)}\n                        data-testid={`button-edit-${driver.id}`}\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(driver)}\n                        disabled={deleteDriverMutation.isPending}\n                        data-testid={`button-delete-${driver.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17672},"client/src/components/TripManagement.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  MapPin, \n  Plus, \n  Edit, \n  Trash2, \n  Search,\n  Filter,\n  Clock,\n  User,\n  Car,\n  Play,\n  Square,\n  CheckCircle,\n  Download,\n  FileText,\n  FileSpreadsheet\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Trip, Vehicle, User as UserType, InsertTrip, insertTripSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { exportTripsToPDF, exportTripsToExcel } from \"@/utils/exportUtils\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nconst tripFormSchema = insertTripSchema.extend({\n  driverId: insertTripSchema.shape.driverId.min(1, \"Driver is required\"),\n  vehicleId: insertTripSchema.shape.vehicleId.min(1, \"Vehicle is required\"),\n  route: insertTripSchema.shape.route.min(1, \"Route is required\"),\n});\n\ntype TripFormData = InsertTrip;\n\ninterface TripWithDetails extends Trip {\n  driverName?: string;\n  vehiclePlate?: string;\n}\n\nexport default function TripManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [driverFilter, setDriverFilter] = useState<string>(\"all\");\n  const [vehicleFilter, setVehicleFilter] = useState<string>(\"all\");\n  const [dateFromFilter, setDateFromFilter] = useState<string>(\"\");\n  const [dateToFilter, setDateToFilter] = useState<string>(\"\");\n  const [sortBy, setSortBy] = useState<string>(\"createdAt\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [viewMode, setViewMode] = useState<\"cards\" | \"table\">(\"table\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingTrip, setEditingTrip] = useState<Trip | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [tripToDelete, setTripToDelete] = useState<Trip | null>(null);\n  const [deletePassword, setDeletePassword] = useState(\"\");\n  const { toast } = useToast();\n\n  // Fetch data\n  const { data: trips = [], isLoading: tripsLoading } = useQuery<Trip[]>({\n    queryKey: ['/api/trips'],\n    refetchInterval: 5000\n  });\n\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles']\n  });\n\n  const { data: users = [] } = useQuery<UserType[]>({\n    queryKey: ['/api/users']\n  });\n\n  const drivers = users.filter(user => user.role === 'driver');\n  const availableVehicles = vehicles.filter(vehicle => vehicle.status === 'available');\n  \n  // Filter drivers to show only those not assigned to active trips\n  const activeTrips = trips.filter(trip => trip.status === 'assigned' || trip.status === 'in_progress');\n  const busyDriverIds = new Set(activeTrips.map(trip => trip.driverId));\n  const availableDrivers = drivers.filter(driver => !busyDriverIds.has(driver.id));\n  \n  // For editing: include currently assigned driver/vehicle even if they're not \"available\"\n  const getSelectableDrivers = (currentDriverId?: string) => {\n    if (!currentDriverId) return availableDrivers;\n    const currentDriver = drivers.find(d => d.id === currentDriverId);\n    return currentDriver && !availableDrivers.find(d => d.id === currentDriverId) \n      ? [...availableDrivers, currentDriver]\n      : availableDrivers;\n  };\n  \n  const getSelectableVehicles = (currentVehicleId?: string) => {\n    if (!currentVehicleId) return availableVehicles;\n    const currentVehicle = vehicles.find(v => v.id === currentVehicleId);\n    return currentVehicle && !availableVehicles.find(v => v.id === currentVehicleId)\n      ? [...availableVehicles, currentVehicle]\n      : availableVehicles;\n  };\n\n  // Create trip mutation\n  const createTripMutation = useMutation({\n    mutationFn: async (data: TripFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/trips\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/trips'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      setIsCreateDialogOpen(false);\n      createForm.reset();\n      toast({\n        title: \"Trip created\",\n        description: \"New trip has been assigned successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error creating trip\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Update trip mutation\n  const updateTripMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<TripFormData> }) => {\n      const response = await apiRequest(\"PUT\", `/api/trips/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/trips'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      setEditingTrip(null);\n      toast({\n        title: \"Trip updated\",\n        description: \"Trip has been updated successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error updating trip\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Delete trip mutation\n  const deleteTripMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/trips/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/trips'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      toast({\n        title: \"Trip deleted\",\n        description: \"Trip has been deleted successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error deleting trip\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Create form\n  const createForm = useForm<TripFormData>({\n    resolver: zodResolver(tripFormSchema),\n    defaultValues: {\n      driverId: \"\",\n      vehicleId: \"\",\n      route: \"\",\n      status: \"assigned\",\n      driverWage: \"\"\n    }\n  });\n\n  // Edit form\n  const editForm = useForm<TripFormData>({\n    resolver: zodResolver(tripFormSchema),\n    defaultValues: {\n      driverId: \"\",\n      vehicleId: \"\",\n      route: \"\",\n      status: \"assigned\",\n      driverWage: \"\"\n    }\n  });\n\n  // Update edit form when editing trip changes\n  React.useEffect(() => {\n    if (editingTrip) {\n      editForm.reset({\n        driverId: editingTrip.driverId,\n        vehicleId: editingTrip.vehicleId,\n        route: editingTrip.route,\n        status: editingTrip.status,\n        driverWage: editingTrip.driverWage || \"\"\n      });\n    }\n  }, [editingTrip, editForm]);\n\n  const onCreateSubmit = (data: TripFormData) => {\n    createTripMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: TripFormData) => {\n    if (editingTrip) {\n      updateTripMutation.mutate({ id: editingTrip.id, data });\n    }\n  };\n\n  const handleDelete = (trip: Trip) => {\n    setTripToDelete(trip);\n    setIsDeleteDialogOpen(true);\n    setDeletePassword(\"\");\n  };\n\n  const confirmDelete = () => {\n    if (deletePassword !== \"delete\") {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid password\",\n        description: \"Please type 'delete' to confirm deletion.\"\n      });\n      return;\n    }\n\n    if (tripToDelete) {\n      deleteTripMutation.mutate(tripToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setTripToDelete(null);\n      setDeletePassword(\"\");\n    }\n  };\n\n  const handleStatusChange = (trip: Trip, newStatus: \"assigned\" | \"in_progress\" | \"completed\" | \"cancelled\") => {\n    updateTripMutation.mutate({ \n      id: trip.id, \n      data: { status: newStatus }\n    });\n  };\n\n  // Get trips with details\n  const tripsWithDetails: TripWithDetails[] = trips.map(trip => {\n    const driver = users.find(user => user.id === trip.driverId);\n    const vehicle = vehicles.find(v => v.id === trip.vehicleId);\n    \n    return {\n      ...trip,\n      driverName: driver?.name || 'Unknown Driver',\n      vehiclePlate: vehicle?.numberPlate || 'Unknown Vehicle'\n    };\n  });\n\n  // Filter and sort trips\n  const filteredAndSortedTrips = React.useMemo(() => {\n    let filtered = tripsWithDetails.filter((trip) => {\n      const matchesSearch = trip.route.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           trip.driverName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           trip.vehiclePlate?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = statusFilter === \"all\" || trip.status === statusFilter;\n      const matchesDriver = driverFilter === \"all\" || trip.driverId === driverFilter;\n      const matchesVehicle = vehicleFilter === \"all\" || trip.vehicleId === vehicleFilter;\n      \n      // Date filtering\n      let matchesDateRange = true;\n      if (dateFromFilter || dateToFilter) {\n        const tripDate = new Date(trip.createdAt || new Date());\n        if (dateFromFilter) {\n          const fromDate = new Date(dateFromFilter);\n          matchesDateRange = matchesDateRange && tripDate >= fromDate;\n        }\n        if (dateToFilter) {\n          const toDate = new Date(dateToFilter);\n          toDate.setHours(23, 59, 59, 999); // End of day\n          matchesDateRange = matchesDateRange && tripDate <= toDate;\n        }\n      }\n      \n      return matchesSearch && matchesStatus && matchesDriver && matchesVehicle && matchesDateRange;\n    });\n\n    // Sort trips\n    filtered.sort((a, b) => {\n      let valueA: any;\n      let valueB: any;\n      \n      switch (sortBy) {\n        case \"driverName\":\n          valueA = a.driverName || \"\";\n          valueB = b.driverName || \"\";\n          break;\n        case \"vehiclePlate\":\n          valueA = a.vehiclePlate || \"\";\n          valueB = b.vehiclePlate || \"\";\n          break;\n        case \"route\":\n          valueA = a.route;\n          valueB = b.route;\n          break;\n        case \"status\":\n          valueA = a.status;\n          valueB = b.status;\n          break;\n        case \"driverWage\":\n          valueA = parseFloat(a.driverWage || \"0\");\n          valueB = parseFloat(b.driverWage || \"0\");\n          break;\n        case \"createdAt\":\n        default:\n          valueA = new Date(a.createdAt || new Date());\n          valueB = new Date(b.createdAt || new Date());\n          break;\n      }\n      \n      if (valueA < valueB) return sortOrder === \"asc\" ? -1 : 1;\n      if (valueA > valueB) return sortOrder === \"asc\" ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [tripsWithDetails, searchTerm, statusFilter, driverFilter, vehicleFilter, dateFromFilter, dateToFilter, sortBy, sortOrder]);\n\n  // For backward compatibility\n  const filteredTrips = filteredAndSortedTrips;\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"assigned\": return \"bg-yellow-500\";\n      case \"in_progress\": return \"bg-blue-500\";\n      case \"completed\": return \"bg-green-500\";\n      case \"cancelled\": return \"bg-red-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case \"assigned\": return \"outline\";\n      case \"in_progress\": return \"default\";\n      case \"completed\": return \"secondary\";\n      case \"cancelled\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"assigned\": return Clock;\n      case \"in_progress\": return Play;\n      case \"completed\": return CheckCircle;\n      case \"cancelled\": return Square;\n      default: return Clock;\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  // Export handlers\n  const handleExportPDF = () => {\n    const tripsToExport = filteredTrips.map(trip => ({\n      ...trip,\n      vehicleType: vehicles.find(v => v.id === trip.vehicleId)?.type\n    }));\n    exportTripsToPDF(tripsToExport, 'Fleet Trips Report');\n    toast({\n      title: \"PDF Export\",\n      description: \"Trips report has been downloaded as PDF.\"\n    });\n  };\n\n  const handleExportExcel = () => {\n    const tripsToExport = filteredTrips.map(trip => ({\n      ...trip,\n      vehicleType: vehicles.find(v => v.id === trip.vehicleId)?.type\n    }));\n    exportTripsToExcel(tripsToExport, 'fleet_trips_report');\n    toast({\n      title: \"Excel Export\",\n      description: \"Trips data has been downloaded as Excel file.\"\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Trip Management</h1>\n          <p className=\"text-muted-foreground mt-1\">Assign and monitor fleet trips</p>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          {/* Export Buttons */}\n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={handleExportPDF}\n              data-testid=\"button-export-pdf\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Export PDF\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={handleExportExcel}\n              data-testid=\"button-export-excel\"\n            >\n              <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n              Export Excel\n            </Button>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-trip\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Assign Trip\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Assign New Trip</DialogTitle>\n              <DialogDescription>\n                Create a new trip assignment\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"driverId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Driver</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-driver\">\n                            <SelectValue placeholder=\"Select driver\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {availableDrivers.map((driver) => (\n                            <SelectItem key={driver.id} value={driver.id}>\n                              {driver.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"vehicleId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vehicle</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-vehicle\">\n                            <SelectValue placeholder=\"Select vehicle\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {availableVehicles.map((vehicle) => (\n                            <SelectItem key={vehicle.id} value={vehicle.id}>\n                              {vehicle.numberPlate} - {vehicle.type}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"route\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Route</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. Warehouse A → Customer Site\" {...field} data-testid=\"input-route\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"driverWage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Driver Wage (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. 1500.00\" \n                          type=\"number\" \n                          step=\"0.01\" \n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-driver-wage\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createTripMutation.isPending}\n                    data-testid=\"button-create-trip\"\n                  >\n                    {createTripMutation.isPending ? \"Assigning...\" : \"Assign Trip\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n        </div>\n      </div>\n\n      {/* Advanced Filters */}\n      <Card>\n        <CardContent className=\"p-4 space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-medium\">Filters & View Options</h3>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                size=\"sm\"\n                variant={viewMode === \"cards\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"cards\")}\n              >\n                Cards\n              </Button>\n              <Button\n                size=\"sm\"\n                variant={viewMode === \"table\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"table\")}\n              >\n                Table\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search trips...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"assigned\">Assigned</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={driverFilter} onValueChange={setDriverFilter}>\n              <SelectTrigger data-testid=\"select-driver-filter\">\n                <SelectValue placeholder=\"Driver\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Drivers</SelectItem>\n                {drivers.map((driver) => (\n                  <SelectItem key={driver.id} value={driver.id}>\n                    {driver.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={vehicleFilter} onValueChange={setVehicleFilter}>\n              <SelectTrigger data-testid=\"select-vehicle-filter\">\n                <SelectValue placeholder=\"Vehicle\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Vehicles</SelectItem>\n                {vehicles.map((vehicle) => (\n                  <SelectItem key={vehicle.id} value={vehicle.id}>\n                    {vehicle.numberPlate}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Input\n              type=\"date\"\n              placeholder=\"From Date\"\n              value={dateFromFilter}\n              onChange={(e) => setDateFromFilter(e.target.value)}\n              data-testid=\"input-date-from\"\n            />\n            \n            <Input\n              type=\"date\"\n              placeholder=\"To Date\"\n              value={dateToFilter}\n              onChange={(e) => setDateToFilter(e.target.value)}\n              data-testid=\"input-date-to\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Sort by:</span>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-[150px]\" data-testid=\"select-sort-by\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"createdAt\">Date Created</SelectItem>\n                  <SelectItem value=\"driverName\">Driver Name</SelectItem>\n                  <SelectItem value=\"vehiclePlate\">Vehicle</SelectItem>\n                  <SelectItem value=\"route\">Route</SelectItem>\n                  <SelectItem value=\"status\">Status</SelectItem>\n                  <SelectItem value=\"driverWage\">Driver Wage</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\n                data-testid=\"button-sort-order\"\n              >\n                {sortOrder === \"asc\" ? \"↑\" : \"↓\"}\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleExportPDF}\n                data-testid=\"button-export-pdf\"\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Export PDF\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleExportExcel}\n                data-testid=\"button-export-excel\"\n              >\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Export Excel\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Trips Display */}\n      {tripsLoading ? (\n        <div className=\"space-y-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <Skeleton className=\"h-12 w-12 rounded-full\" />\n                    <div>\n                      <Skeleton className=\"h-4 w-32 mb-2\" />\n                      <Skeleton className=\"h-3 w-24\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-6 w-20\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : filteredTrips.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <MapPin className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium mb-2\">No trips found</h3>\n          <p className=\"text-muted-foreground\">\n            {searchTerm || statusFilter !== \"all\" \n              ? \"Try adjusting your search filters\"\n              : \"Start by assigning your first trip\"\n            }\n          </p>\n        </div>\n      ) : viewMode === \"table\" ? (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\" data-testid=\"trips-table\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Driver</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Vehicle</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Route</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Wage (₹)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Created</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredTrips.map((trip, index) => {\n                    const StatusIcon = getStatusIcon(trip.status);\n                    \n                    return (\n                      <motion.tr\n                        key={trip.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className=\"border-b hover:bg-muted/25 transition-colors\"\n                        data-testid={`trip-row-${trip.id}`}\n                      >\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                                {getInitials(trip.driverName || 'U')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-medium\">{trip.driverName}</span>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <Car className=\"w-3 h-3 mr-1\" />\n                            {trip.vehiclePlate}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <span className=\"text-sm\">{trip.route}</span>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <Badge variant={getStatusVariant(trip.status)} className=\"gap-1\">\n                            <StatusIcon className=\"w-3 h-3\" />\n                            {trip.status.replace('_', ' ')}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <span className=\"font-medium\">\n                            {trip.driverWage ? `₹${parseFloat(trip.driverWage).toLocaleString()}` : 'Not set'}\n                          </span>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {trip.createdAt ? new Date(trip.createdAt).toLocaleDateString() : 'Unknown'}\n                          </span>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex items-center gap-1\">\n                            {trip.status === 'assigned' && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleStatusChange(trip, 'in_progress')}\n                                data-testid={`button-start-${trip.id}`}\n                              >\n                                <Play className=\"w-3 h-3 mr-1\" />\n                                Start\n                              </Button>\n                            )}\n                            \n                            {trip.status === 'in_progress' && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleStatusChange(trip, 'completed')}\n                                data-testid={`button-complete-${trip.id}`}\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Complete\n                              </Button>\n                            )}\n                            \n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => setEditingTrip(trip)}\n                              data-testid={`button-edit-${trip.id}`}\n                            >\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            \n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDelete(trip)}\n                              disabled={deleteTripMutation.isPending}\n                              data-testid={`button-delete-${trip.id}`}\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </motion.tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredTrips.map((trip, index) => {\n            const StatusIcon = getStatusIcon(trip.status);\n            \n            return (\n              <motion.div\n                key={trip.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card className=\"hover-elevate\" data-testid={`trip-card-${trip.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4 flex-1\">\n                        <Avatar>\n                          <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                            {getInitials(trip.driverName || 'U')}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h3 className=\"font-semibold text-foreground\">{trip.driverName}</h3>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <Car className=\"w-3 h-3 mr-1\" />\n                              {trip.vehiclePlate}\n                            </Badge>\n                          </div>\n                          <p className=\"text-muted-foreground text-sm mb-2\">{trip.route}</p>\n                          <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                            <span>\n                              Created: {trip.createdAt ? new Date(trip.createdAt).toLocaleDateString() : 'Unknown'}\n                            </span>\n                            <span>\n                              Wage: {trip.driverWage ? `₹${parseFloat(trip.driverWage).toLocaleString()}` : 'Not set'}\n                            </span>\n                            {trip.startTime && (\n                              <span>\n                                Started: {new Date(trip.startTime).toLocaleString()}\n                              </span>\n                            )}\n                            {trip.endTime && (\n                              <span>\n                                Completed: {new Date(trip.endTime).toLocaleString()}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={getStatusVariant(trip.status)} className=\"gap-1\">\n                          <StatusIcon className=\"w-3 h-3\" />\n                          {trip.status.replace('_', ' ')}\n                        </Badge>\n                        \n                        {trip.status === 'assigned' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleStatusChange(trip, 'in_progress')}\n                            data-testid={`button-start-${trip.id}`}\n                          >\n                            <Play className=\"w-3 h-3 mr-1\" />\n                            Start\n                          </Button>\n                        )}\n                        \n                        {trip.status === 'in_progress' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleStatusChange(trip, 'completed')}\n                            data-testid={`button-complete-${trip.id}`}\n                          >\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Complete\n                          </Button>\n                        )}\n                        \n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingTrip(trip)}\n                          data-testid={`button-edit-${trip.id}`}\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        \n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDelete(trip)}\n                          disabled={deleteTripMutation.isPending}\n                          data-testid={`button-delete-${trip.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingTrip} onOpenChange={() => setEditingTrip(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Trip</DialogTitle>\n            <DialogDescription>\n              Update trip information\n            </DialogDescription>\n          </DialogHeader>\n          {editingTrip && (\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"driverId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Driver</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-driver\">\n                            <SelectValue placeholder=\"Select driver\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {getSelectableDrivers(editingTrip?.driverId).map((driver) => (\n                            <SelectItem key={driver.id} value={driver.id}>\n                              {driver.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"vehicleId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vehicle</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-vehicle\">\n                            <SelectValue placeholder=\"Select vehicle\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {getSelectableVehicles(editingTrip?.vehicleId).map((vehicle) => (\n                            <SelectItem key={vehicle.id} value={vehicle.id}>\n                              {vehicle.numberPlate} - {vehicle.type}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"route\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Route</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. Warehouse A → Customer Site\" {...field} data-testid=\"input-edit-route\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"driverWage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Driver Wage (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. 1500.00\" \n                          type=\"number\" \n                          step=\"0.01\" \n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-edit-driver-wage\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"assigned\">Assigned</SelectItem>\n                          <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditingTrip(null)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateTripMutation.isPending}\n                    data-testid=\"button-update-trip\"\n                  >\n                    {updateTripMutation.isPending ? \"Updating...\" : \"Update Trip\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirm Trip Deletion</DialogTitle>\n            <DialogDescription>\n              This action cannot be undone. This will permanently delete the trip and all associated location data.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {tripToDelete && (\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <h4 className=\"font-medium\">Trip Details:</h4>\n                <p className=\"text-sm text-muted-foreground\">Route: {tripToDelete.route}</p>\n                <p className=\"text-sm text-muted-foreground\">Status: {tripToDelete.status}</p>\n              </div>\n            )}\n            \n            <div>\n              <label htmlFor=\"delete-password\" className=\"text-sm font-medium\">\n                Type \"delete\" to confirm:\n              </label>\n              <Input\n                id=\"delete-password\"\n                type=\"text\"\n                value={deletePassword}\n                onChange={(e) => setDeletePassword(e.target.value)}\n                placeholder=\"Type 'delete' to confirm\"\n                className=\"mt-1\"\n                data-testid=\"input-delete-password\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end gap-2 mt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setIsDeleteDialogOpen(false);\n                setTripToDelete(null);\n                setDeletePassword(\"\");\n              }}\n              data-testid=\"button-cancel-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              onClick={confirmDelete}\n              disabled={deletePassword !== \"delete\" || deleteTripMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteTripMutation.isPending ? \"Deleting...\" : \"Delete Trip\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":45423},"client/src/components/VehicleManagement.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle,\n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Car, \n  Plus, \n  Edit, \n  Trash2, \n  Search,\n  Filter\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Vehicle, InsertVehicle, insertVehicleSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nconst vehicleFormSchema = insertVehicleSchema.extend({\n  numberPlate: insertVehicleSchema.shape.numberPlate.min(1, \"Number plate is required\"),\n  type: insertVehicleSchema.shape.type.min(1, \"Vehicle type is required\"),\n});\n\ntype VehicleFormData = InsertVehicle;\n\nexport default function VehicleManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingVehicle, setEditingVehicle] = useState<Vehicle | null>(null);\n  const { toast } = useToast();\n\n  // Fetch vehicles\n  const { data: vehicles = [], isLoading } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles'],\n    refetchInterval: 30000\n  });\n\n  // Create vehicle mutation\n  const createVehicleMutation = useMutation({\n    mutationFn: async (data: VehicleFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/vehicles\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Vehicle created\",\n        description: \"New vehicle has been added successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error creating vehicle\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Update vehicle mutation\n  const updateVehicleMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<VehicleFormData> }) => {\n      const response = await apiRequest(\"PUT\", `/api/vehicles/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      setEditingVehicle(null);\n      toast({\n        title: \"Vehicle updated\",\n        description: \"Vehicle has been updated successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error updating vehicle\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Delete vehicle mutation\n  const deleteVehicleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/vehicles/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/vehicles'] });\n      toast({\n        title: \"Vehicle deleted\",\n        description: \"Vehicle has been deleted successfully.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error deleting vehicle\",\n        description: error.message || \"Something went wrong.\"\n      });\n    }\n  });\n\n  // Create form\n  const createForm = useForm<VehicleFormData>({\n    resolver: zodResolver(vehicleFormSchema),\n    defaultValues: {\n      numberPlate: \"\",\n      type: \"\",\n      status: \"available\"\n    }\n  });\n\n  // Edit form\n  const editForm = useForm<VehicleFormData>({\n    resolver: zodResolver(vehicleFormSchema),\n    defaultValues: {\n      numberPlate: \"\",\n      type: \"\",\n      status: \"available\"\n    }\n  });\n\n  // Update edit form when editing vehicle changes\n  React.useEffect(() => {\n    if (editingVehicle) {\n      editForm.reset({\n        numberPlate: editingVehicle.numberPlate,\n        type: editingVehicle.type,\n        status: editingVehicle.status\n      });\n    }\n  }, [editingVehicle, editForm]);\n\n  const onCreateSubmit = (data: VehicleFormData) => {\n    createVehicleMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: VehicleFormData) => {\n    if (editingVehicle) {\n      updateVehicleMutation.mutate({ id: editingVehicle.id, data });\n    }\n  };\n\n  const handleDelete = (vehicle: Vehicle) => {\n    if (confirm(`Are you sure you want to delete vehicle ${vehicle.numberPlate}?`)) {\n      deleteVehicleMutation.mutate(vehicle.id);\n    }\n  };\n\n  // Filter vehicles\n  const filteredVehicles = vehicles.filter((vehicle) => {\n    const matchesSearch = vehicle.numberPlate.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         vehicle.type.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || vehicle.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"available\": return \"bg-green-500\";\n      case \"in_use\": return \"bg-blue-500\";\n      case \"maintenance\": return \"bg-orange-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case \"available\": return \"default\";\n      case \"in_use\": return \"secondary\";\n      case \"maintenance\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Vehicle Management</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your fleet vehicles</p>\n        </div>\n        \n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-vehicle\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Vehicle\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add New Vehicle</DialogTitle>\n              <DialogDescription>\n                Create a new vehicle in your fleet\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"numberPlate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number Plate</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. TRK-001\" {...field} data-testid=\"input-number-plate\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vehicle Type</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. Truck, Van, Car\" {...field} data-testid=\"input-type\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"available\">Available</SelectItem>\n                          <SelectItem value=\"in_use\">In Use</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createVehicleMutation.isPending}\n                    data-testid=\"button-create-vehicle\"\n                  >\n                    {createVehicleMutation.isPending ? \"Creating...\" : \"Create Vehicle\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search vehicles...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-filter\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"available\">Available</SelectItem>\n                <SelectItem value=\"in_use\">In Use</SelectItem>\n                <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Vehicles Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <Skeleton className=\"h-4 w-20 mb-2\" />\n                <Skeleton className=\"h-6 w-32 mb-4\" />\n                <Skeleton className=\"h-4 w-16\" />\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredVehicles.length === 0 ? (\n          <div className=\"col-span-full text-center py-12\">\n            <Car className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No vehicles found</h3>\n            <p className=\"text-muted-foreground\">\n              {searchTerm || statusFilter !== \"all\" \n                ? \"Try adjusting your search filters\"\n                : \"Start by adding your first vehicle\"\n              }\n            </p>\n          </div>\n        ) : (\n          filteredVehicles.map((vehicle, index) => (\n            <motion.div\n              key={vehicle.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <Card className=\"hover-elevate cursor-pointer\" data-testid={`vehicle-card-${vehicle.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded-full ${getStatusColor(vehicle.status)}`} />\n                      <CardTitle className=\"text-lg\">{vehicle.numberPlate}</CardTitle>\n                    </div>\n                    <Badge variant={getStatusVariant(vehicle.status)}>\n                      {vehicle.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                  <CardDescription className=\"text-base font-medium\">\n                    {vehicle.type}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Created: {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleDateString() : 'Unknown'}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => setEditingVehicle(vehicle)}\n                        data-testid={`button-edit-${vehicle.id}`}\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(vehicle)}\n                        disabled={deleteVehicleMutation.isPending}\n                        data-testid={`button-delete-${vehicle.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingVehicle} onOpenChange={() => setEditingVehicle(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Vehicle</DialogTitle>\n            <DialogDescription>\n              Update vehicle information\n            </DialogDescription>\n          </DialogHeader>\n          {editingVehicle && (\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"numberPlate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number Plate</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. TRK-001\" {...field} data-testid=\"input-edit-number-plate\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vehicle Type</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. Truck, Van, Car\" {...field} data-testid=\"input-edit-type\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"available\">Available</SelectItem>\n                          <SelectItem value=\"in_use\">In Use</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditingVehicle(null)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateVehicleMutation.isPending}\n                    data-testid=\"button-update-vehicle\"\n                  >\n                    {updateVehicleMutation.isPending ? \"Updating...\" : \"Update Vehicle\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18149},"client/src/components/LiveMap.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\";\nimport { Icon, LatLngTuple } from \"leaflet\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Trip, Vehicle, User, Location } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Car, Navigation, Clock, Wifi, WifiOff } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Fix leaflet default markers\nimport markerIcon2x from \"leaflet/dist/images/marker-icon-2x.png\";\nimport markerIcon from \"leaflet/dist/images/marker-icon.png\";\nimport markerShadow from \"leaflet/dist/images/marker-shadow.png\";\n\n// Fix default markers\ndelete (Icon.Default.prototype as any)._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: markerIcon2x,\n  iconUrl: markerIcon,\n  shadowUrl: markerShadow,\n});\n\ninterface TripWithDetails extends Trip {\n  driverName?: string;\n  vehiclePlate?: string;\n  locations?: Location[];\n}\n\ninterface LiveMapProps {\n  selectedTripId?: string | null;\n  onTripSelect?: (tripId: string) => void;\n}\n\nexport default function LiveMap({ selectedTripId, onTripSelect }: LiveMapProps) {\n  const [center, setCenter] = useState<LatLngTuple>([51.505, -0.09]); // Default to London\n  const [realtimeLocations, setRealtimeLocations] = useState<Location[]>([]);\n  const [realtimeTrips, setRealtimeTrips] = useState<Trip[]>([]);\n\n  // WebSocket connection for real-time updates\n  const { isConnected, lastMessage, sendMessage } = useWebSocket();\n\n  // Fetch trips, vehicles, users, and locations\n  const { data: trips = [] } = useQuery<Trip[]>({\n    queryKey: ['/api/trips'],\n    refetchInterval: 5000\n  });\n\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles']\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: ['/api/users']\n  });\n\n  // Fetch initial locations for active trips\n  const { data: initialLocations = [] } = useQuery<Location[]>({\n    queryKey: ['/api/locations'],\n    refetchInterval: 10000 // Less frequent polling since we have WebSocket updates\n  });\n\n  // Handle real-time updates via WebSocket\n  useEffect(() => {\n    if (lastMessage?.type === 'location_update' && lastMessage.data) {\n      const newLocation = lastMessage.data as Location;\n      setRealtimeLocations(prev => {\n        // Accumulate location points for continuous tracking\n        const filtered = prev.filter(loc => \n          loc.tripId !== newLocation.tripId || \n          (loc.timestamp && newLocation.timestamp && \n           new Date(loc.timestamp).getTime() !== new Date(newLocation.timestamp).getTime())\n        );\n        \n        // Keep only last 50 points per trip to avoid memory issues\n        const tripLocations = filtered.filter(loc => loc.tripId === newLocation.tripId);\n        const otherLocations = filtered.filter(loc => loc.tripId !== newLocation.tripId);\n        \n        const updatedTripLocations = [...tripLocations, newLocation]\n          .sort((a, b) => {\n            const aTime = a.timestamp ? new Date(a.timestamp).getTime() : 0;\n            const bTime = b.timestamp ? new Date(b.timestamp).getTime() : 0;\n            return aTime - bTime;\n          })\n          .slice(-50); // Keep last 50 points\n        \n        return [...otherLocations, ...updatedTripLocations];\n      });\n    } else if (lastMessage?.type === 'trip_status_update' && lastMessage.data) {\n      const updatedTrip = lastMessage.data as Trip;\n      setRealtimeTrips(prev => {\n        // Update trip in realtime trips or add it\n        const filtered = prev.filter(trip => trip.id !== updatedTrip.id);\n        return [...filtered, updatedTrip];\n      });\n    }\n  }, [lastMessage]);\n\n  // Combine initial locations with real-time updates\n  const allLocations = [...initialLocations, ...realtimeLocations];\n\n  // Combine initial trips with real-time updates\n  const allTrips = [...trips];\n  realtimeTrips.forEach(realtimeTrip => {\n    const index = allTrips.findIndex(trip => trip.id === realtimeTrip.id);\n    if (index >= 0) {\n      allTrips[index] = realtimeTrip; // Replace with updated version\n    } else {\n      allTrips.push(realtimeTrip); // Add new trip\n    }\n  });\n\n  // Create trip markers with details\n  const tripsWithDetails: TripWithDetails[] = allTrips\n    .filter(trip => trip.status === 'in_progress' || trip.status === 'assigned')\n    .map(trip => {\n      const driver = users.find(user => user.id === trip.driverId);\n      const vehicle = vehicles.find(v => v.id === trip.vehicleId);\n      const tripLocations = allLocations.filter(loc => loc.tripId === trip.id);\n      \n      return {\n        ...trip,\n        driverName: driver?.name || 'Unknown Driver',\n        vehiclePlate: vehicle?.numberPlate || 'Unknown Vehicle',\n        locations: tripLocations\n      };\n    });\n\n  // Generate demo locations for vehicles without real GPS data\n  const generateDemoLocation = (index: number): LatLngTuple => {\n    const baseLocations: LatLngTuple[] = [\n      [51.515, -0.09],  // London area\n      [51.525, -0.08],  // Slightly north\n      [51.505, -0.07],  // Slightly east\n      [51.495, -0.11],  // Southwest\n      [51.535, -0.12],  // Northwest\n    ];\n    \n    return baseLocations[index % baseLocations.length] || [51.505, -0.09];\n  };\n\n  // Create custom truck SVG icons\n  const createTruckIcon = (color: string, vehicleType: string, driverName: string, isSelected: boolean = false) => {\n    const truckSvg = vehicleType === 'truck' || vehicleType === 'Truck' ? `\n      <!-- Truck Body -->\n      <path d=\"M4 18H2V16C2 14.9 2.9 14 4 14H6V18Z\" fill=\"${color}\"/>\n      <path d=\"M6 14H20V18H18C18 19.1 17.1 20 16 20S14 19.1 14 18H10C10 19.1 9.1 20 8 20S6 19.1 6 18Z\" fill=\"${color}\"/>\n      <path d=\"M20 14V10C20 8.9 19.1 8 18 8H14V14H20Z\" fill=\"${color}\"/>\n      <!-- Truck Cab -->\n      <path d=\"M6 8V14H14V8C14 6.9 13.1 6 12 6H8C6.9 6 6 6.9 6 8Z\" fill=\"${color}\"/>\n      <!-- Wheels -->\n      <circle cx=\"8\" cy=\"18\" r=\"1.5\" fill=\"#333\"/>\n      <circle cx=\"16\" cy=\"18\" r=\"1.5\" fill=\"#333\"/>\n      <!-- Highlights -->\n      <path d=\"M7 9H13V11H7Z\" fill=\"rgba(255,255,255,0.3)\"/>\n      <path d=\"M15 10H19V12H15Z\" fill=\"rgba(255,255,255,0.3)\"/>\n    ` : `\n      <!-- Van Body -->\n      <path d=\"M4 18H2V12C2 10.9 2.9 10 4 10H20C21.1 10 22 10.9 22 12V18H20C20 19.1 19.1 20 18 20S16 19.1 16 18H8C8 19.1 7.1 20 6 20S4 19.1 4 18Z\" fill=\"${color}\"/>\n      <!-- Van Windows -->\n      <path d=\"M5 7C5 5.9 5.9 5 7 5H17C18.1 5 19 5.9 19 7V10H5V7Z\" fill=\"${color}\"/>\n      <!-- Wheels -->\n      <circle cx=\"6\" cy=\"18\" r=\"1.5\" fill=\"#333\"/>\n      <circle cx=\"18\" cy=\"18\" r=\"1.5\" fill=\"#333\"/>\n      <!-- Windshield -->\n      <path d=\"M6 6H18V8H6Z\" fill=\"rgba(255,255,255,0.4)\"/>\n      <!-- Side Windows -->\n      <path d=\"M6 8H10V10H6Z\" fill=\"rgba(255,255,255,0.3)\"/>\n      <path d=\"M14 8H18V10H14Z\" fill=\"rgba(255,255,255,0.3)\"/>\n    `;\n\n    const iconSvg = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 24 24\">\n        <defs>\n          <filter id=\"shadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"2\" flood-color=\"rgba(0,0,0,0.3)\"/>\n          </filter>\n        </defs>\n        <g filter=\"url(#shadow)\">\n          ${truckSvg}\n        </g>\n        ${isSelected ? `\n          <circle cx=\"12\" cy=\"12\" r=\"11\" fill=\"none\" stroke=\"#fff\" stroke-width=\"2\" opacity=\"0.8\"/>\n          <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"none\" stroke=\"${color}\" stroke-width=\"2\"/>\n        ` : ''}\n      </svg>\n    `;\n    \n    return new Icon({\n      iconUrl: 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(iconSvg),\n      iconSize: [40, 40],\n      iconAnchor: [20, 20],\n      popupAnchor: [0, -20],\n      className: isSelected ? 'selected-vehicle-marker' : 'vehicle-marker'\n    });\n  };\n\n  // Create hover tooltip component\n  const createHoverTooltip = (trip: TripWithDetails, vehicle: Vehicle | undefined) => {\n    return `\n      <div style=\"\n        background: rgba(0, 0, 0, 0.9);\n        color: white;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-size: 12px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        max-width: 200px;\n        z-index: 1000;\n        pointer-events: none;\n      \">\n        <div style=\"font-weight: bold; margin-bottom: 4px;\">\n          ${trip.driverName}\n        </div>\n        <div style=\"opacity: 0.9; margin-bottom: 2px;\">\n          ${trip.vehiclePlate}\n        </div>\n        <div style=\"opacity: 0.8; font-size: 11px;\">\n          Status: ${trip.status.charAt(0).toUpperCase() + trip.status.slice(1)}\n        </div>\n        <div style=\"opacity: 0.8; font-size: 11px;\">\n          ${trip.route.length > 30 ? trip.route.substring(0, 30) + '...' : trip.route}\n        </div>\n      </div>\n    `;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"in_progress\": return \"#3b82f6\"; // blue\n      case \"assigned\": return \"#eab308\"; // yellow\n      default: return \"#6b7280\"; // gray\n    }\n  };\n\n  return (\n    <div className=\"w-full h-full relative\">\n      <MapContainer\n        center={center}\n        zoom={12}\n        style={{ height: '100%', width: '100%', borderRadius: '8px' }}\n        className=\"z-0\"\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        \n        {/* Vehicle markers */}\n        {tripsWithDetails.map((trip, index) => {\n          const vehicle = vehicles.find(v => v.id === trip.vehicleId);\n          const hasRealLocation = trip.locations && trip.locations.length > 0;\n          \n          // Use real location if available, otherwise demo location\n          const position: LatLngTuple = hasRealLocation\n            ? [\n                parseFloat(trip.locations![trip.locations!.length - 1].latitude),\n                parseFloat(trip.locations![trip.locations!.length - 1].longitude)\n              ]\n            : generateDemoLocation(index);\n\n          return (\n            <Marker\n              key={trip.id}\n              position={position}\n              icon={createTruckIcon(\n                getStatusColor(trip.status),\n                vehicle?.type || 'van',\n                trip.driverName || 'Unknown Driver',\n                selectedTripId === trip.id\n              )}\n              eventHandlers={{\n                click: () => onTripSelect?.(trip.id),\n                mouseover: (e) => {\n                  const marker = e.target;\n                  const tooltipHtml = createHoverTooltip(trip, vehicle);\n                  marker.bindTooltip(tooltipHtml, {\n                    permanent: false,\n                    direction: 'top',\n                    offset: [0, -10],\n                    className: 'custom-truck-tooltip',\n                    opacity: 1\n                  }).openTooltip();\n                },\n                mouseout: (e) => {\n                  const marker = e.target;\n                  marker.closeTooltip();\n                }\n              }}\n            >\n              <Popup>\n                <Card className=\"border-0 shadow-none min-w-[200px]\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Car className=\"w-4 h-4 text-primary\" />\n                      <span className=\"font-semibold\">{trip.vehiclePlate}</span>\n                      <Badge variant=\"secondary\">{trip.status}</Badge>\n                    </div>\n                    <div className=\"space-y-1 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Navigation className=\"w-3 h-3\" />\n                        <span>{trip.driverName}</span>\n                      </div>\n                      <div className=\"text-muted-foreground\">\n                        <div className=\"font-medium\">Route:</div>\n                        <div className=\"text-xs\">{trip.route}</div>\n                      </div>\n                      {trip.startTime && (\n                        <div className=\"flex items-center gap-2 pt-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          <span className=\"text-xs\">\n                            Started: {new Date(trip.startTime).toLocaleTimeString()}\n                          </span>\n                        </div>\n                      )}\n                      {!hasRealLocation && (\n                        <div className=\"text-xs text-muted-foreground italic\">\n                          Demo location - GPS data not available\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </Popup>\n            </Marker>\n          );\n        })}\n\n        {/* Route polylines for trips with multiple locations */}\n        {tripsWithDetails\n          .filter(trip => trip.locations && trip.locations.length > 1)\n          .map(trip => {\n            const pathPositions: LatLngTuple[] = trip.locations!.map(loc => [\n              parseFloat(loc.latitude),\n              parseFloat(loc.longitude)\n            ]);\n\n            return (\n              <Polyline\n                key={`route-${trip.id}`}\n                positions={pathPositions}\n                pathOptions={{\n                  color: getStatusColor(trip.status),\n                  weight: 3,\n                  opacity: 0.7,\n                  dashArray: trip.status === 'assigned' ? '10, 10' : undefined\n                }}\n              />\n            );\n          })}\n      </MapContainer>\n\n      {/* WebSocket connection status */}\n      <motion.div\n        initial={{ opacity: 0, x: 10 }}\n        animate={{ opacity: 1, x: 0 }}\n        className=\"absolute top-4 right-4 z-10\"\n      >\n        <Card className=\"bg-background/90 backdrop-blur-sm border shadow-lg\">\n          <CardContent className=\"p-2\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              {isConnected ? (\n                <>\n                  <Wifi className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-green-500\">Connected</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"w-4 h-4 text-red-500\" />\n                  <span className=\"text-red-500\">Disconnected</span>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Map overlay info */}\n      <motion.div\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"absolute bottom-4 left-4 z-10\"\n      >\n        <Card className=\"bg-background/90 backdrop-blur-sm border shadow-lg\">\n          <CardContent className=\"p-3\">\n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                <span>In Progress ({allTrips.filter(t => t.status === 'in_progress').length})</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                <span>Assigned ({allTrips.filter(t => t.status === 'assigned').length})</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":15621},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  message?: string;\n}\n\ninterface UseWebSocketReturn {\n  isConnected: boolean;\n  lastMessage: WebSocketMessage | null;\n  sendMessage: (message: any) => void;\n}\n\nexport function useWebSocket(url?: string): UseWebSocketReturn {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimer = useRef<NodeJS.Timeout | null>(null);\n\n  // Use current location but fallback to localhost for development\n  const host = window.location.host || 'localhost:5000';\n  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsUrl = url || `${protocol}//${host}/ws`;\n\n  const connect = () => {\n    try {\n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        console.log('WebSocket connected to SR Logistics');\n        setIsConnected(true);\n        \n        // Clear any existing reconnect timer\n        if (reconnectTimer.current) {\n          clearTimeout(reconnectTimer.current);\n          reconnectTimer.current = null;\n        }\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data) as WebSocketMessage;\n          console.log('WebSocket message received:', message);\n          setLastMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.reason);\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        if (!reconnectTimer.current) {\n          reconnectTimer.current = setTimeout(() => {\n            console.log('Attempting to reconnect WebSocket...');\n            connect();\n          }, 3000);\n        }\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      setIsConnected(false);\n    }\n  };\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Message not sent:', message);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      // Cleanup on unmount\n      if (reconnectTimer.current) {\n        clearTimeout(reconnectTimer.current);\n        reconnectTimer.current = null;\n      }\n      \n      if (ws.current) {\n        ws.current.close();\n        ws.current = null;\n      }\n    };\n  }, [wsUrl]);\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}","size_bytes":2905},"client/src/components/DriverDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Trip, Vehicle, User } from \"@shared/schema\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  MapPin, \n  Navigation, \n  Clock, \n  Car,\n  Play,\n  Pause,\n  Square,\n  Wifi,\n  WifiOff\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface DriverDashboardProps {\n  driverId?: string;\n}\n\nexport default function DriverDashboard({ driverId }: DriverDashboardProps) {\n  const [isTracking, setIsTracking] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n  const [watchId, setWatchId] = useState<number | null>(null);\n  const { toast } = useToast();\n\n  // WebSocket connection for real-time updates\n  const { isConnected, sendMessage } = useWebSocket();\n\n  // Mock driver ID for demo (in real app, this would come from auth)\n  const currentDriverId = driverId || \"9d3c029c-bea0-4e57-8e4c-9afd29620476\"; // Sample driver ID\n\n  // Fetch driver's assigned trips\n  const { data: trips = [] } = useQuery<Trip[]>({\n    queryKey: ['/api/trips'],\n    refetchInterval: 5000\n  });\n\n  const { data: vehicles = [] } = useQuery<Vehicle[]>({\n    queryKey: ['/api/vehicles']\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: ['/api/users']\n  });\n\n  // Get current driver's trips\n  const driverTrips = trips.filter(trip => trip.driverId === currentDriverId);\n  const activeTrip = driverTrips.find(trip => trip.status === 'assigned' || trip.status === 'in_progress');\n  \n  const driver = users.find(user => user.id === currentDriverId);\n  const vehicle = activeTrip ? vehicles.find(v => v.id === activeTrip.vehicleId) : null;\n\n  // Location tracking\n  const startLocationTracking = () => {\n    if (!navigator.geolocation) {\n      toast({\n        variant: \"destructive\",\n        title: \"Location not supported\",\n        description: \"Your browser doesn't support geolocation.\"\n      });\n      return;\n    }\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n\n    const successCallback = (position: GeolocationPosition) => {\n      const { latitude, longitude } = position.coords;\n      setCurrentLocation({ latitude, longitude });\n\n      // Send location update via WebSocket if trip is active\n      if (activeTrip && isConnected) {\n        sendMessage({\n          type: 'location_update',\n          payload: {\n            tripId: activeTrip.id,\n            latitude,\n            longitude,\n            driverId: currentDriverId\n          }\n        });\n      }\n    };\n\n    const errorCallback = (error: GeolocationPositionError) => {\n      console.error('Geolocation error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Location error\",\n        description: \"Failed to get your location. Please check permissions.\"\n      });\n    };\n\n    const id = navigator.geolocation.watchPosition(successCallback, errorCallback, options);\n    setWatchId(id);\n    setIsTracking(true);\n\n    toast({\n      title: \"Location tracking started\",\n      description: \"Your location is now being tracked.\"\n    });\n  };\n\n  const stopLocationTracking = () => {\n    if (watchId !== null) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n    }\n    setIsTracking(false);\n    toast({\n      title: \"Location tracking stopped\",\n      description: \"Location tracking has been disabled.\"\n    });\n  };\n\n  const updateTripStatus = (status: 'in_progress' | 'completed') => {\n    if (!activeTrip || !isConnected) return;\n\n    sendMessage({\n      type: 'trip_status_update',\n      payload: {\n        tripId: activeTrip.id,\n        status,\n        driverId: currentDriverId\n      }\n    });\n\n    toast({\n      title: \"Trip status updated\",\n      description: `Trip marked as ${status.replace('_', ' ')}.`\n    });\n\n    // Auto-start tracking when trip starts\n    if (status === 'in_progress' && !isTracking) {\n      startLocationTracking();\n    }\n\n    // Stop tracking when trip completes\n    if (status === 'completed' && isTracking) {\n      stopLocationTracking();\n    }\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (watchId !== null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [watchId]);\n\n  return (\n    <div className=\"p-6 space-y-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Driver Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Welcome back, {driver?.name || 'Driver'}\n          </p>\n        </div>\n        \n        {/* Connection Status */}\n        <Card>\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              {isConnected ? (\n                <>\n                  <Wifi className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-green-500\">Connected</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"w-4 h-4 text-red-500\" />\n                  <span className=\"text-red-500\">Disconnected</span>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Active Trip Card */}\n      {activeTrip ? (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n        >\n          <Card className=\"border-primary/20 bg-primary/5\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Car className=\"w-5 h-5\" />\n                    Active Trip\n                  </CardTitle>\n                  <CardDescription>\n                    {vehicle?.numberPlate} • {vehicle?.type}\n                  </CardDescription>\n                </div>\n                <Badge variant={activeTrip.status === 'in_progress' ? 'default' : 'secondary'}>\n                  {activeTrip.status.replace('_', ' ')}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <Navigation className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm\">{activeTrip.route}</span>\n              </div>\n              \n              {activeTrip.startTime && (\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">\n                    Started: {new Date(activeTrip.startTime).toLocaleString()}\n                  </span>\n                </div>\n              )}\n\n              {currentLocation && (\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">\n                    Location: {currentLocation.latitude.toFixed(6)}, {currentLocation.longitude.toFixed(6)}\n                  </span>\n                </div>\n              )}\n\n              <div className=\"flex gap-2 pt-2\">\n                {activeTrip.status === 'assigned' && (\n                  <Button \n                    onClick={() => updateTripStatus('in_progress')}\n                    disabled={!isConnected}\n                    data-testid=\"button-start-trip\"\n                  >\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Start Trip\n                  </Button>\n                )}\n                \n                {activeTrip.status === 'in_progress' && (\n                  <Button \n                    onClick={() => updateTripStatus('completed')}\n                    disabled={!isConnected}\n                    data-testid=\"button-complete-trip\"\n                  >\n                    <Square className=\"w-4 h-4 mr-2\" />\n                    Complete Trip\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Car className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No Active Trip</h3>\n            <p className=\"text-muted-foreground\">\n              You don't have any assigned trips at the moment.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Location Tracking Control */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"w-5 h-5\" />\n            Location Tracking\n          </CardTitle>\n          <CardDescription>\n            Control your location sharing for real-time tracking\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {currentLocation && (\n            <div className=\"p-3 bg-muted rounded-lg\">\n              <p className=\"text-sm font-medium mb-1\">Current Location:</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Lat: {currentLocation.latitude.toFixed(6)}, \n                Lng: {currentLocation.longitude.toFixed(6)}\n              </p>\n            </div>\n          )}\n          \n          <div className=\"flex gap-2\">\n            {!isTracking ? (\n              <Button \n                onClick={startLocationTracking}\n                disabled={!activeTrip}\n                data-testid=\"button-start-tracking\"\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                Start Tracking\n              </Button>\n            ) : (\n              <Button \n                variant=\"outline\" \n                onClick={stopLocationTracking}\n                data-testid=\"button-stop-tracking\"\n              >\n                <Pause className=\"w-4 h-4 mr-2\" />\n                Stop Tracking\n              </Button>\n            )}\n          </div>\n          \n          {!activeTrip && (\n            <p className=\"text-sm text-muted-foreground\">\n              Location tracking is only available when you have an active trip.\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Trip History */}\n      {driverTrips.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Trips</CardTitle>\n            <CardDescription>Your trip history</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {driverTrips.slice(0, 5).map((trip) => {\n                const tripVehicle = vehicles.find(v => v.id === trip.vehicleId);\n                return (\n                  <div key={trip.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{trip.route}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {tripVehicle?.numberPlate} • {trip.createdAt ? new Date(trip.createdAt).toLocaleDateString() : 'Unknown date'}\n                      </p>\n                    </div>\n                    <Badge variant={\n                      trip.status === 'completed' ? 'default' : \n                      trip.status === 'in_progress' ? 'secondary' : 'outline'\n                    }>\n                      {trip.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11981},"client/src/pages/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { Activity, Users, Car, TrendingUp, MapPin, Clock, Target, AlertTriangle } from \"lucide-react\";\nimport { Trip, Vehicle, Location } from \"@shared/schema\";\n\ninterface AnalyticsData {\n  totalTrips: number;\n  activeTrips: number;\n  completedTrips: number;\n  totalDrivers: number;\n  activeDrivers: number;\n  totalVehicles: number;\n  activeVehicles: number;\n  avgTripDuration: number;\n  totalDistance: number;\n  tripsByStatus: { status: string; count: number; fill: string }[];\n  tripsByDay: { day: string; trips: number }[];\n  driverPerformance: { name: string; trips: number; avgRating: number }[];\n  recentTrips: Trip[];\n}\n\nconst COLORS = {\n  assigned: '#3b82f6',\n  in_progress: '#f59e0b', \n  completed: '#10b981',\n  cancelled: '#ef4444'\n};\n\nexport default function Analytics() {\n  const { data: analytics, isLoading } = useQuery<AnalyticsData>({\n    queryKey: ['/api/analytics'],\n    refetchInterval: 10000, // Refresh every 10 seconds for real-time updates\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(8)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Unable to load analytics data</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const utilizationRate = analytics.totalVehicles > 0 \n    ? Math.round((analytics.activeVehicles / analytics.totalVehicles) * 100)\n    : 0;\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"analytics-dashboard\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Fleet Analytics</h1>\n          <p className=\"text-muted-foreground\">Real-time insights and performance metrics</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-sm\">\n          <Activity className=\"h-3 w-3 mr-1\" />\n          Live Data\n        </Badge>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card data-testid=\"metric-active-trips\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Trips</CardTitle>\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">{analytics.activeTrips}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.totalTrips} total trips\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"metric-active-drivers\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Drivers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">{analytics.activeDrivers}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.totalDrivers} total drivers\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"metric-vehicle-utilization\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Vehicle Utilization</CardTitle>\n            <Car className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">{utilizationRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.activeVehicles}/{analytics.totalVehicles} vehicles\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"metric-avg-duration\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Trip Duration</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">\n              {Math.round(analytics.avgTripDuration)}m\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round(analytics.totalDistance)}km total\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Trip Status Distribution */}\n        <Card data-testid=\"chart-trip-status\">\n          <CardHeader>\n            <CardTitle>Trip Status Distribution</CardTitle>\n            <CardDescription>Current status of all trips</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={analytics.tripsByStatus}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ status, count }) => `${status}: ${count}`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"count\"\n                >\n                  {analytics.tripsByStatus.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Trips Over Time */}\n        <Card data-testid=\"chart-trips-timeline\">\n          <CardHeader>\n            <CardTitle>Trips Over Time</CardTitle>\n            <CardDescription>Daily trip volume for the past week</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={analytics.tripsByDay}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"day\" />\n                <YAxis />\n                <Tooltip />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"trips\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={2}\n                  dot={{ fill: '#3b82f6' }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Driver Performance */}\n        <Card data-testid=\"chart-driver-performance\" className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>Driver Performance</CardTitle>\n            <CardDescription>Trip completion and performance metrics by driver</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.driverPerformance}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis yAxisId=\"left\" />\n                <YAxis yAxisId=\"right\" orientation=\"right\" />\n                <Tooltip />\n                <Legend />\n                <Bar yAxisId=\"left\" dataKey=\"trips\" fill=\"#3b82f6\" name=\"Completed Trips\" />\n                <Bar yAxisId=\"right\" dataKey=\"avgRating\" fill=\"#10b981\" name=\"Avg Rating\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card data-testid=\"recent-trips\">\n        <CardHeader>\n          <CardTitle>Recent Trips</CardTitle>\n          <CardDescription>Latest trip activities and status updates</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {analytics.recentTrips.slice(0, 5).map((trip) => (\n              <div key={trip.id} className=\"flex items-center space-x-4 p-3 rounded-lg bg-muted/50\">\n                <div className=\"flex-shrink-0\">\n                  <Badge \n                    variant={trip.status === 'completed' ? 'default' : \n                            trip.status === 'in_progress' ? 'secondary' : 'outline'}\n                    data-testid={`trip-status-${trip.id}`}\n                  >\n                    {trip.status.replace('_', ' ')}\n                  </Badge>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground truncate\">\n                    Route: {trip.route}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Trip #{trip.id} • Driver ID: {trip.driverId}\n                  </p>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {trip.createdAt ? new Date(trip.createdAt).toLocaleDateString() : 'N/A'}\n                </div>\n              </div>\n            ))}\n            {analytics.recentTrips.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No recent trips to display\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10236},"client/src/components/DatabaseMonitor.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Database, \n  HardDrive, \n  Activity, \n  RefreshCw,\n  TrendingUp,\n  Table,\n  FileText,\n  AlertTriangle\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface DatabaseStats {\n  tables: {\n    name: string;\n    rowCount: number;\n    sizeBytes: number;\n    sizeMB: number;\n    lastUpdated: string;\n  }[];\n  totalSize: number;\n  totalSizeMB: number;\n  totalRecords: number;\n  memoryUsage: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  connectionCount: number;\n  queryCount: number;\n  healthStatus: 'healthy' | 'warning' | 'critical';\n}\n\ninterface DatabaseMonitorProps {\n  className?: string;\n}\n\nexport default function DatabaseMonitor({ className }: DatabaseMonitorProps) {\n\n  // Fetch database statistics\n  const { data: dbStats, isLoading, error, refetch } = useQuery<DatabaseStats>({\n    queryKey: ['/api/database/stats'],\n    queryFn: async () => {\n      const response = await fetch('/api/database/stats', {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    },\n    refetchInterval: 30000, // Auto-refresh every 30 seconds\n    retry: 3,\n  });\n\n  // Manual refresh\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const formatNumber = (num: number): string => {\n    return new Intl.NumberFormat().format(num);\n  };\n\n  const getHealthColor = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'text-green-600';\n      case 'warning': return 'text-yellow-600';\n      case 'critical': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getHealthBadgeVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case 'healthy': return 'secondary';\n      case 'warning': return 'outline';\n      case 'critical': return 'destructive';\n      default: return 'outline';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-4 ${className || ''}`}>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5\" />\n              Database Monitor\n            </CardTitle>\n            <CardDescription>Loading database statistics...</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-24 bg-muted animate-pulse rounded-lg\" />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`space-y-4 ${className || ''}`}>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5\" />\n              Database Monitor\n              <Badge variant=\"destructive\">Error</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span>Unable to load database statistics</span>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Retry\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!dbStats) {\n    return (\n      <div className={`space-y-4 ${className || ''}`}>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"w-5 h-5\" />\n              Database Monitor\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No database statistics available\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className || ''}`} data-testid=\"database-monitor\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Database className=\"w-6 h-6\" />\n            Database Monitor\n          </h2>\n          <p className=\"text-muted-foreground\">Real-time database performance and usage statistics</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={getHealthBadgeVariant(dbStats.healthStatus)}>\n            {dbStats.healthStatus.toUpperCase()}\n          </Badge>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n        >\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Size</p>\n                  <p className=\"text-2xl font-bold\">{formatBytes(dbStats.totalSize)}</p>\n                </div>\n                <HardDrive className=\"w-8 h-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Records</p>\n                  <p className=\"text-2xl font-bold\">{formatNumber(dbStats.totalRecords)}</p>\n                </div>\n                <FileText className=\"w-8 h-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Connections</p>\n                  <p className=\"text-2xl font-bold\">{dbStats.connectionCount}</p>\n                </div>\n                <Activity className=\"w-8 h-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Memory Usage</p>\n                  <p className=\"text-2xl font-bold\">{dbStats.memoryUsage.percentage}%</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 text-purple-500\" />\n              </div>\n              <div className=\"mt-2\">\n                <Progress value={dbStats.memoryUsage.percentage} className=\"h-2\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* Table Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Table className=\"w-5 h-5\" />\n            Table Statistics\n          </CardTitle>\n          <CardDescription>Detailed breakdown by database table</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {dbStats.tables.map((table, index) => (\n              <motion.div\n                key={table.name}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"flex items-center justify-between p-4 rounded-lg border bg-card\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-2 h-8 bg-gradient-to-b from-blue-500 to-purple-500 rounded-full\" />\n                  <div>\n                    <h4 className=\"font-medium capitalize\">{table.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatNumber(table.rowCount)} records\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium\">{formatBytes(table.sizeBytes)}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Updated: {new Date(table.lastUpdated).toLocaleDateString()}\n                  </p>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Memory Usage Details */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Memory Usage</CardTitle>\n          <CardDescription>Current memory allocation and usage patterns</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Used Memory</span>\n              <span className=\"text-sm\">{formatBytes(dbStats.memoryUsage.used)}</span>\n            </div>\n            <Progress value={dbStats.memoryUsage.percentage} className=\"h-3\" />\n            <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n              <span>0 B</span>\n              <span>{formatBytes(dbStats.memoryUsage.total)}</span>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4 pt-4\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">{dbStats.queryCount}</p>\n                <p className=\"text-sm text-muted-foreground\">Queries Executed</p>\n              </div>\n              <div className=\"text-center\">\n                <p className={`text-2xl font-bold ${getHealthColor(dbStats.healthStatus)}`}>\n                  {dbStats.healthStatus.toUpperCase()}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Health Status</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11534},"client/src/components/TruckLoadingAnimation.tsx":{"content":"import { Truck, Package } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TruckLoadingAnimationProps {\n  text?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport function TruckLoadingAnimation({ \n  text = \"Loading...\", \n  size = \"md\",\n  className \n}: TruckLoadingAnimationProps) {\n  const sizeClasses = {\n    sm: \"w-8 h-8\",\n    md: \"w-12 h-12\", \n    lg: \"w-16 h-16\"\n  };\n\n  const textSizeClasses = {\n    sm: \"text-sm\",\n    md: \"text-base\",\n    lg: \"text-lg\"\n  };\n\n  return (\n    <div className={cn(\"flex flex-col items-center justify-center gap-3\", className)} data-testid=\"truck-loading-animation\">\n      <div className=\"relative flex items-center justify-center\">\n        {/* Road line */}\n        <div className=\"absolute bottom-0 h-0.5 w-24 bg-gradient-to-r from-transparent via-muted-foreground to-transparent opacity-50\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary to-transparent animate-pulse\" />\n        </div>\n        \n        {/* Animated truck */}\n        <div className=\"relative animate-bounce\">\n          <Truck \n            className={cn(\n              sizeClasses[size], \n              \"text-primary animate-pulse\"\n            )} \n            data-testid=\"truck-icon\"\n          />\n          \n          {/* Cargo packages */}\n          <div className=\"absolute -top-1 -right-1 flex space-x-0.5\">\n            <Package className=\"w-2 h-2 text-muted-foreground animate-pulse delay-100\" />\n            <Package className=\"w-2 h-2 text-muted-foreground animate-pulse delay-200\" />\n          </div>\n        </div>\n        \n        {/* Loading dots */}\n        <div className=\"absolute -bottom-4 flex space-x-1\">\n          <div className=\"w-1 h-1 bg-primary rounded-full animate-bounce\" />\n          <div className=\"w-1 h-1 bg-primary rounded-full animate-bounce delay-100\" />\n          <div className=\"w-1 h-1 bg-primary rounded-full animate-bounce delay-200\" />\n        </div>\n      </div>\n      \n      {/* Loading text */}\n      <div className={cn(\n        \"text-muted-foreground font-medium animate-pulse\",\n        textSizeClasses[size]\n      )} data-testid=\"loading-text\">\n        {text}\n      </div>\n    </div>\n  );\n}\n\n// Compact version for inline loading states\ninterface TruckSpinnerProps {\n  size?: \"sm\" | \"md\";\n  className?: string;\n}\n\nexport function TruckSpinner({ size = \"sm\", className }: TruckSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-6 h-6\"\n  };\n\n  return (\n    <div className={cn(\"inline-flex items-center\", className)} data-testid=\"truck-spinner\">\n      <Truck \n        className={cn(\n          sizeClasses[size], \n          \"text-primary animate-spin\"\n        )}\n        data-testid=\"spinner-truck-icon\"\n      />\n    </div>\n  );\n}\n\n// Page-level loading component\ninterface TruckPageLoadingProps {\n  title?: string;\n  subtitle?: string;\n  className?: string;\n}\n\nexport function TruckPageLoading({ \n  title = \"Loading Transportation Data\", \n  subtitle = \"Please wait while we fetch your logistics information...\",\n  className \n}: TruckPageLoadingProps) {\n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center min-h-[60vh] p-8\",\n      className\n    )} data-testid=\"truck-page-loading\">\n      <TruckLoadingAnimation size=\"lg\" text=\"\" />\n      \n      <div className=\"mt-6 text-center space-y-2\">\n        <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"loading-title\">\n          {title}\n        </h2>\n        <p className=\"text-muted-foreground max-w-md\" data-testid=\"loading-subtitle\">\n          {subtitle}\n        </p>\n      </div>\n      \n      {/* Progress indicator */}\n      <div className=\"mt-8 w-48 h-1 bg-muted rounded-full overflow-hidden\">\n        <div className=\"h-full bg-gradient-to-r from-primary to-primary/60 rounded-full\" \n             style={{ \n               animation: 'loadingProgress 2s ease-in-out infinite'\n             }} />\n      </div>\n      \n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @keyframes loadingProgress {\n            0% { width: 0%; }\n            50% { width: 70%; }\n            100% { width: 100%; }\n          }\n        `\n      }} />\n    </div>\n  );\n}","size_bytes":4197},"client/src/utils/exportUtils.ts":{"content":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport html2canvas from 'html2canvas';\nimport { Trip, Vehicle, User } from '@shared/schema';\n\ninterface TripWithDetails extends Trip {\n  driverName?: string;\n  vehiclePlate?: string;\n  vehicleType?: string;\n}\n\nexport const exportTripsToPDF = async (\n  trips: TripWithDetails[],\n  title: string = 'Trips Report'\n) => {\n  const doc = new jsPDF();\n  \n  // Add header\n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  // Add generation date\n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  // Prepare table data\n  const tableData = trips.map(trip => [\n    trip.id.slice(0, 8) + '...',\n    trip.driverName || 'Unknown',\n    trip.vehiclePlate || 'Unknown',\n    trip.route,\n    trip.status.replace('_', ' '),\n    trip.priority || 'medium',\n    trip.distance ? `${trip.distance} km` : 'N/A',\n    trip.startTime ? new Date(trip.startTime).toLocaleDateString() : 'Not started',\n    trip.endTime ? new Date(trip.endTime).toLocaleDateString() : 'Not completed'\n  ]);\n\n  // Add table\n  autoTable(doc, {\n    head: [['Trip ID', 'Driver', 'Vehicle', 'Route', 'Status', 'Priority', 'Distance', 'Start Date', 'End Date']],\n    body: tableData,\n    startY: 40,\n    styles: {\n      fontSize: 8,\n      cellPadding: 2,\n    },\n    headStyles: {\n      fillColor: [41, 128, 185],\n      textColor: 255,\n    },\n    alternateRowStyles: {\n      fillColor: [245, 245, 245],\n    },\n  });\n\n  // Add summary statistics\n  const yPosition = (doc as any).lastAutoTable.finalY + 20;\n  doc.setFontSize(14);\n  doc.text('Summary Statistics:', 20, yPosition);\n  \n  doc.setFontSize(10);\n  const totalTrips = trips.length;\n  const completedTrips = trips.filter(t => t.status === 'completed').length;\n  const inProgressTrips = trips.filter(t => t.status === 'in_progress').length;\n  const totalDistance = trips.reduce((sum, trip) => sum + (parseFloat(trip.distance?.toString() || '0')), 0);\n  \n  doc.text(`Total Trips: ${totalTrips}`, 20, yPosition + 10);\n  doc.text(`Completed: ${completedTrips}`, 20, yPosition + 20);\n  doc.text(`In Progress: ${inProgressTrips}`, 20, yPosition + 30);\n  doc.text(`Total Distance: ${totalDistance.toFixed(2)} km`, 20, yPosition + 40);\n\n  // Save the PDF\n  doc.save(`${title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);\n};\n\nexport const exportTripsToExcel = (\n  trips: TripWithDetails[],\n  filename: string = 'trips_export'\n) => {\n  // Prepare data for Excel\n  const excelData = trips.map(trip => ({\n    'Trip ID': trip.id,\n    'Driver Name': trip.driverName || 'Unknown',\n    'Vehicle Plate': trip.vehiclePlate || 'Unknown',\n    'Vehicle Type': trip.vehicleType || 'Unknown',\n    'Route': trip.route,\n    'Status': trip.status.replace('_', ' '),\n    'Priority': trip.priority || 'medium',\n    'Start Location': trip.startLocation || 'N/A',\n    'End Location': trip.endLocation || 'N/A',\n    'Distance (km)': trip.distance ? parseFloat(trip.distance.toString()) : 0,\n    'Estimated Duration (hrs)': trip.estimatedDuration ? parseFloat(trip.estimatedDuration.toString()) : 0,\n    'Fuel Consumed (L)': trip.fuelConsumed ? parseFloat(trip.fuelConsumed.toString()) : 0,\n    'Notes': trip.notes || '',\n    'Start Time': trip.startTime ? new Date(trip.startTime).toLocaleString() : 'Not started',\n    'End Time': trip.endTime ? new Date(trip.endTime).toLocaleString() : 'Not completed',\n    'Created At': new Date(trip.createdAt!).toLocaleString(),\n  }));\n\n  // Create workbook\n  const workbook = XLSX.utils.book_new();\n  \n  // Create trips worksheet\n  const tripsWorksheet = XLSX.utils.json_to_sheet(excelData);\n  \n  // Set column widths\n  const columnWidths = [\n    { wch: 15 }, // Trip ID\n    { wch: 20 }, // Driver Name\n    { wch: 15 }, // Vehicle Plate\n    { wch: 15 }, // Vehicle Type\n    { wch: 30 }, // Route\n    { wch: 12 }, // Status\n    { wch: 10 }, // Priority\n    { wch: 20 }, // Start Location\n    { wch: 20 }, // End Location\n    { wch: 12 }, // Distance\n    { wch: 18 }, // Duration\n    { wch: 15 }, // Fuel\n    { wch: 30 }, // Notes\n    { wch: 20 }, // Start Time\n    { wch: 20 }, // End Time\n    { wch: 20 }, // Created At\n  ];\n  \n  tripsWorksheet['!cols'] = columnWidths;\n  \n  XLSX.utils.book_append_sheet(workbook, tripsWorksheet, 'Trips');\n\n  // Create summary worksheet\n  const summary = [\n    { Metric: 'Total Trips', Value: trips.length },\n    { Metric: 'Completed Trips', Value: trips.filter(t => t.status === 'completed').length },\n    { Metric: 'In Progress Trips', Value: trips.filter(t => t.status === 'in_progress').length },\n    { Metric: 'Assigned Trips', Value: trips.filter(t => t.status === 'assigned').length },\n    { Metric: 'Cancelled Trips', Value: trips.filter(t => t.status === 'cancelled').length },\n    { Metric: 'Total Distance (km)', Value: trips.reduce((sum, trip) => sum + (parseFloat(trip.distance?.toString() || '0')), 0).toFixed(2) },\n    { Metric: 'Total Fuel Consumed (L)', Value: trips.reduce((sum, trip) => sum + (parseFloat(trip.fuelConsumed?.toString() || '0')), 0).toFixed(2) },\n    { Metric: 'Report Generated', Value: new Date().toLocaleString() },\n  ];\n  \n  const summaryWorksheet = XLSX.utils.json_to_sheet(summary);\n  summaryWorksheet['!cols'] = [{ wch: 25 }, { wch: 20 }];\n  \n  XLSX.utils.book_append_sheet(workbook, summaryWorksheet, 'Summary');\n\n  // Save the file\n  XLSX.writeFile(workbook, `${filename}_${new Date().toISOString().split('T')[0]}.xlsx`);\n};\n\nexport const exportChartToPDF = async (\n  chartElementId: string,\n  title: string = 'Chart Export'\n) => {\n  const chartElement = document.getElementById(chartElementId);\n  if (!chartElement) {\n    console.error('Chart element not found');\n    return;\n  }\n\n  try {\n    const canvas = await html2canvas(chartElement, {\n      backgroundColor: '#ffffff',\n      scale: 2,\n    });\n    \n    const imgData = canvas.toDataURL('image/png');\n    const doc = new jsPDF();\n    \n    // Add title\n    doc.setFontSize(16);\n    doc.text(title, 20, 20);\n    \n    // Add chart image\n    const imgWidth = 170;\n    const imgHeight = (canvas.height * imgWidth) / canvas.width;\n    doc.addImage(imgData, 'PNG', 20, 30, imgWidth, imgHeight);\n    \n    // Add generation info\n    doc.setFontSize(10);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30 + imgHeight + 10);\n    \n    doc.save(`${title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);\n  } catch (error) {\n    console.error('Error exporting chart:', error);\n  }\n};","size_bytes":6529},"api/app.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerApiRoutes } from \"../server/routes\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Simple logging for serverless environment\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  \n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      console.log(`${req.method} ${path} ${res.statusCode} in ${duration}ms`);\n    }\n  });\n\n  next();\n});\n\n// Initialize API routes (serverless-compatible, no WebSocket)\n(async () => {\n  try {\n    await registerApiRoutes(app);\n    console.log(\"API routes registered successfully for serverless deployment\");\n  } catch (error) {\n    console.error(\"Failed to register API routes:\", error);\n  }\n})();\n\n// Error handling middleware (must come after routes)\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || \"Internal Server Error\";\n  \n  console.error(\"API Error:\", err);\n  res.status(status).json({ message });\n});\n\n// For Vercel serverless deployment\nexport default app;","size_bytes":1240}},"version":1}